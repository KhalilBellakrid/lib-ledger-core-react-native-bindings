// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from wallet.djinni

package com.ledger.reactnative;

import co.ledger.core.AccountCreationInfo;
import com.facebook.react.bridge.Promise;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.bridge.WritableNativeArray;
import com.facebook.react.bridge.WritableNativeMap;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Optional;
import java.util.UUID;

/**Structure of informations needed for account creation */
public class RCTCoreAccountCreationInfo extends ReactContextBaseJavaModule {
    private final ReactApplicationContext reactContext;
    private Map<String, AccountCreationInfo> javaObjects;
    public Map<String, AccountCreationInfo> getJavaObjects()
    {
        return javaObjects;
    }

    public RCTCoreAccountCreationInfo(ReactApplicationContext reactContext)
    {
        super(reactContext);
        this.reactContext = reactContext;
        this.javaObjects = new HashMap<String, AccountCreationInfo>();
    }

    @Override
    public String getName()
    {
        return "RCTCoreAccountCreationInfo";
    }
    @ReactMethod
    public void release(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            this.javaObjects.remove(uid);
            promise.resolve(0);
        }
        else
        {
            promise.reject("Failed to release instance of RCTCoreAccountCreationInfo", "First parameter of RCTCoreAccountCreationInfo::release should be an instance of RCTCoreAccountCreationInfo");
        }
    }
    @ReactMethod
    public void log(Promise promise)
    {
        WritableNativeArray result = new WritableNativeArray();
        for (Map.Entry<String, AccountCreationInfo> elem : this.javaObjects.entrySet())
        {
            result.pushString(elem.getKey());
        }
        promise.resolve(result);
    }
    @ReactMethod
    public void flush(Promise promise)
    {
        this.javaObjects.clear();
        promise.resolve(0);
    }

    @ReactMethod
    public void init(int index, ReadableArray owners, ReadableArray derivations, ReadableArray publicKeys, ReadableArray chainCodes, Promise promise) {
        ArrayList<String> javaParam_1 = new ArrayList<String>();
        for (int i = 0; i <  owners.size(); i++)
        {
            String owners_elem = owners.getString(i);
            javaParam_1.add(owners_elem);
        }
        ArrayList<String> javaParam_2 = new ArrayList<String>();
        for (int i = 0; i <  derivations.size(); i++)
        {
            String derivations_elem = derivations.getString(i);
            javaParam_2.add(derivations_elem);
        }
        ArrayList<byte[]> javaParam_3 = new ArrayList<byte[]>();
        for (int i = 0; i <  publicKeys.size(); i++)
        {
            byte [] publicKeys_elem = new byte [publicKeys.getArray(i).size()];
            for (int publicKeys_i = 0; publicKeys_i < publicKeys.getArray(i).size(); publicKeys_i++)
            {
                publicKeys_elem[publicKeys_i] = (byte) publicKeys.getArray(i).getDouble(publicKeys_i);
            }
            javaParam_3.add(publicKeys_elem);
        }
        ArrayList<byte[]> javaParam_4 = new ArrayList<byte[]>();
        for (int i = 0; i <  chainCodes.size(); i++)
        {
            byte [] chainCodes_elem = new byte [chainCodes.getArray(i).size()];
            for (int chainCodes_i = 0; chainCodes_i < chainCodes.getArray(i).size(); chainCodes_i++)
            {
                chainCodes_elem[chainCodes_i] = (byte) chainCodes.getArray(i).getDouble(chainCodes_i);
            }
            javaParam_4.add(chainCodes_elem);
        }
        AccountCreationInfo javaResult = new AccountCreationInfo(index, javaParam_1, javaParam_2, javaParam_3, javaParam_4);

        String uuid = UUID.randomUUID().toString();
        this.javaObjects.put(uuid, javaResult);
        WritableNativeMap finalResult = new WritableNativeMap();
        finalResult.putString("type","RCTCoreAccountCreationInfo");
        finalResult.putString("uid",uuid);
        promise.resolve(finalResult);
    }
    @ReactMethod
    public void getIndex(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            AccountCreationInfo javaObj = this.javaObjects.get(uid);
            int result = javaObj.getIndex();
            promise.resolve(result);
        }
        else
        {
            promise.reject("Failed to call RCTCoreAccountCreationInfo::getIndex", "First parameter of RCTCoreAccountCreationInfo::getIndex should be an instance of RCTCoreAccountCreationInfo");
        }
    }

    @ReactMethod
    public void getOwners(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            AccountCreationInfo javaObj = this.javaObjects.get(uid);
            ArrayList<String> result = javaObj.getOwners();
            WritableNativeArray converted_result = new WritableNativeArray();
            for (String result_elem : result)
            {
                converted_result.pushString(result_elem);
            }
            promise.resolve(converted_result);
        }
        else
        {
            promise.reject("Failed to call RCTCoreAccountCreationInfo::getOwners", "First parameter of RCTCoreAccountCreationInfo::getOwners should be an instance of RCTCoreAccountCreationInfo");
        }
    }

    @ReactMethod
    public void getDerivations(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            AccountCreationInfo javaObj = this.javaObjects.get(uid);
            ArrayList<String> result = javaObj.getDerivations();
            WritableNativeArray converted_result = new WritableNativeArray();
            for (String result_elem : result)
            {
                converted_result.pushString(result_elem);
            }
            promise.resolve(converted_result);
        }
        else
        {
            promise.reject("Failed to call RCTCoreAccountCreationInfo::getDerivations", "First parameter of RCTCoreAccountCreationInfo::getDerivations should be an instance of RCTCoreAccountCreationInfo");
        }
    }

    @ReactMethod
    public void getPublicKeys(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            AccountCreationInfo javaObj = this.javaObjects.get(uid);
            ArrayList<byte[]> result = javaObj.getPublicKeys();
            WritableNativeArray converted_result = new WritableNativeArray();
            for (byte[] result_elem : result)
            {
                String converted_result_elem = result_elem.toString();
                converted_result.pushString(result_elem.toString());
            }
            promise.resolve(converted_result);
        }
        else
        {
            promise.reject("Failed to call RCTCoreAccountCreationInfo::getPublicKeys", "First parameter of RCTCoreAccountCreationInfo::getPublicKeys should be an instance of RCTCoreAccountCreationInfo");
        }
    }

    @ReactMethod
    public void getChainCodes(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            AccountCreationInfo javaObj = this.javaObjects.get(uid);
            ArrayList<byte[]> result = javaObj.getChainCodes();
            WritableNativeArray converted_result = new WritableNativeArray();
            for (byte[] result_elem : result)
            {
                String converted_result_elem = result_elem.toString();
                converted_result.pushString(result_elem.toString());
            }
            promise.resolve(converted_result);
        }
        else
        {
            promise.reject("Failed to call RCTCoreAccountCreationInfo::getChainCodes", "First parameter of RCTCoreAccountCreationInfo::getChainCodes should be an instance of RCTCoreAccountCreationInfo");
        }
    }

}
