// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from bitcoin_like_wallet.djinni

package com.ledger.reactnative;

import co.ledger.core.BitcoinLikeOutput;
import co.ledger.core.BitcoinLikePreparedTransaction;
import com.facebook.react.bridge.Promise;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.bridge.ReadableNativeArray;
import com.facebook.react.bridge.ReadableNativeMap;
import com.facebook.react.bridge.WritableNativeArray;
import com.facebook.react.bridge.WritableNativeMap;
import com.facebook.react.module.annotations.ReactModule;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Optional;
import java.util.TimeZone;
import java.util.UUID;

/** Structure representing a prepared bitcoin transaction (ready to be used with device). */
@ReactModule(name = "RCTCoreBitcoinLikePreparedTransaction")
public class RCTCoreBitcoinLikePreparedTransaction extends ReactContextBaseJavaModule {
    private final ReactApplicationContext reactContext;
    private Map<String, BitcoinLikePreparedTransaction> javaObjects;
    private Map<String, Object> implementationsData;
    public Map<String, BitcoinLikePreparedTransaction> getJavaObjects()
    {
        return javaObjects;
    }

    public RCTCoreBitcoinLikePreparedTransaction(ReactApplicationContext reactContext)
    {
        super(reactContext);
        this.reactContext = reactContext;
        this.javaObjects = new HashMap<String, BitcoinLikePreparedTransaction>();
        this.implementationsData = new HashMap<>();
    }

    @Override
    public String getName()
    {
        return "RCTCoreBitcoinLikePreparedTransaction";
    }
    @ReactMethod
    public void release(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            this.javaObjects.remove(uid);
            promise.resolve(0);
        }
        else
        {
            promise.reject("Failed to release instance of RCTCoreBitcoinLikePreparedTransaction", "First parameter of RCTCoreBitcoinLikePreparedTransaction::release should be an instance of RCTCoreBitcoinLikePreparedTransaction");
        }
    }
    @ReactMethod
    public void log(Promise promise)
    {
        WritableNativeArray result = new WritableNativeArray();
        for (Map.Entry<String, BitcoinLikePreparedTransaction> elem : this.javaObjects.entrySet())
        {
            result.pushString(elem.getKey());
        }
        promise.resolve(result);
    }
    @ReactMethod
    public void flush(Promise promise)
    {
        this.javaObjects.clear();
        promise.resolve(0);
    }
    @ReactMethod
    public void isNull(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            if (this.javaObjects.get(uid) == null)
            {
                promise.resolve(true);
                return;
            }
            else
            {
                promise.resolve(false);
                return;
            }
        }
        promise.resolve(true);
    }

    @ReactMethod
    public void init(int version, ReadableArray inputs, ReadableArray paths, ReadableArray outputs, int lockTime, Promise promise) {
        WritableNativeMap implementationsData = new WritableNativeMap();
        ArrayList<BitcoinLikeOutput> javaParam_1 = new ArrayList<BitcoinLikeOutput>();
        WritableNativeArray javaParam_1_data = new WritableNativeArray();

        for (int i = 0; i <  inputs.size(); i++)
        {
            ReadableMap inputs_elem = inputs.getMap(i);
            RCTCoreBitcoinLikeOutput rctParam_inputs_elem = this.reactContext.getNativeModule(RCTCoreBitcoinLikeOutput.class);
            BitcoinLikeOutput javaParam_1_elem = rctParam_inputs_elem.getJavaObjects().get(inputs_elem.getString("uid"));
            javaParam_1_data.pushString(inputs_elem.getString("uid"));
            javaParam_1.add(javaParam_1_elem);
        }
        implementationsData.putArray("inputs", javaParam_1_data);

        ArrayList<String> javaParam_2 = new ArrayList<String>();
        for (int i = 0; i <  paths.size(); i++)
        {
            String paths_elem = paths.getString(i);
            javaParam_2.add(paths_elem);
        }
        ArrayList<BitcoinLikeOutput> javaParam_3 = new ArrayList<BitcoinLikeOutput>();
        WritableNativeArray javaParam_3_data = new WritableNativeArray();

        for (int i = 0; i <  outputs.size(); i++)
        {
            ReadableMap outputs_elem = outputs.getMap(i);
            RCTCoreBitcoinLikeOutput rctParam_outputs_elem = this.reactContext.getNativeModule(RCTCoreBitcoinLikeOutput.class);
            BitcoinLikeOutput javaParam_3_elem = rctParam_outputs_elem.getJavaObjects().get(outputs_elem.getString("uid"));
            javaParam_3_data.pushString(outputs_elem.getString("uid"));
            javaParam_3.add(javaParam_3_elem);
        }
        implementationsData.putArray("outputs", javaParam_3_data);

        BitcoinLikePreparedTransaction javaResult = new BitcoinLikePreparedTransaction(version, javaParam_1, javaParam_2, javaParam_3, lockTime);

        String uuid = UUID.randomUUID().toString();
        this.javaObjects.put(uuid, javaResult);
        WritableNativeMap finalResult = new WritableNativeMap();
        finalResult.putString("type","RCTCoreBitcoinLikePreparedTransaction");
        finalResult.putString("uid",uuid);
        this.implementationsData.put(uuid, implementationsData);
        promise.resolve(finalResult);
    }
    public void mapImplementationsData(ReadableMap currentInstance)
    {
        String currentInstanceUid = currentInstance.getString("uid");
        BitcoinLikePreparedTransaction javaImpl = this.javaObjects.get(currentInstanceUid);
        WritableNativeMap implementationsData = new WritableNativeMap();
        ArrayList<BitcoinLikeOutput> field_1 = javaImpl.getInputs();
        WritableNativeArray converted_field_1 = new WritableNativeArray();
        for (BitcoinLikeOutput field_1_elem : field_1)
        {
            String field_1_elem_uuid = UUID.randomUUID().toString();
            RCTCoreBitcoinLikeOutput rctImpl_field_1_elem = this.reactContext.getNativeModule(RCTCoreBitcoinLikeOutput.class);
            rctImpl_field_1_elem.getJavaObjects().put(field_1_elem_uuid, field_1_elem);
            WritableNativeMap converted_field_1_elem = new WritableNativeMap();
            converted_field_1_elem.putString("type","RCTCoreBitcoinLikeOutput");
            converted_field_1_elem.putString("uid",field_1_elem_uuid);
            converted_field_1.pushMap(converted_field_1_elem);
        }
        implementationsData.putArray("inputs", converted_field_1);
        ArrayList<BitcoinLikeOutput> field_3 = javaImpl.getOutputs();
        WritableNativeArray converted_field_3 = new WritableNativeArray();
        for (BitcoinLikeOutput field_3_elem : field_3)
        {
            String field_3_elem_uuid = UUID.randomUUID().toString();
            RCTCoreBitcoinLikeOutput rctImpl_field_3_elem = this.reactContext.getNativeModule(RCTCoreBitcoinLikeOutput.class);
            rctImpl_field_3_elem.getJavaObjects().put(field_3_elem_uuid, field_3_elem);
            WritableNativeMap converted_field_3_elem = new WritableNativeMap();
            converted_field_3_elem.putString("type","RCTCoreBitcoinLikeOutput");
            converted_field_3_elem.putString("uid",field_3_elem_uuid);
            converted_field_3.pushMap(converted_field_3_elem);
        }
        implementationsData.putArray("outputs", converted_field_3);
        this.implementationsData.put(currentInstanceUid, implementationsData);
    }
    @ReactMethod
    public void getVersion(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            BitcoinLikePreparedTransaction javaObj = this.javaObjects.get(uid);
            int result = javaObj.getVersion();
            WritableNativeMap resultMap = new WritableNativeMap();
            resultMap.putInt("value", result);
            promise.resolve(resultMap);
        }
        else
        {
            promise.reject("Failed to call RCTCoreBitcoinLikePreparedTransaction::getVersion", "First parameter of RCTCoreBitcoinLikePreparedTransaction::getVersion should be an instance of RCTCoreBitcoinLikePreparedTransaction");
        }
    }

    @ReactMethod
    public void getInputs(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            if (!this.implementationsData.containsKey(uid))
            {
                this.mapImplementationsData(currentInstance);
            }
            ReadableNativeMap data = (ReadableNativeMap)this.implementationsData.get(uid);
            ReadableArray resultTmp = data.getArray("inputs");
            WritableNativeArray result = new WritableNativeArray();
            for (int i = 0; i < resultTmp.size(); i++)
            {
                WritableNativeMap result_elem = new WritableNativeMap();
                result_elem.merge(resultTmp.getMap(i));
                result.pushMap(result_elem);
            }
            promise.resolve(result);
        }
        else
        {
            promise.reject("Failed to call RCTCoreBitcoinLikePreparedTransaction::getInputs", "First parameter of RCTCoreBitcoinLikePreparedTransaction::getInputs should be an instance of RCTCoreBitcoinLikePreparedTransaction");
        }
    }

    @ReactMethod
    public void getPaths(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            BitcoinLikePreparedTransaction javaObj = this.javaObjects.get(uid);
            ArrayList<String> result = javaObj.getPaths();
            WritableNativeArray converted_result = new WritableNativeArray();
            for (String result_elem : result)
            {
                converted_result.pushString(result_elem);
            }
            promise.resolve(converted_result);
        }
        else
        {
            promise.reject("Failed to call RCTCoreBitcoinLikePreparedTransaction::getPaths", "First parameter of RCTCoreBitcoinLikePreparedTransaction::getPaths should be an instance of RCTCoreBitcoinLikePreparedTransaction");
        }
    }

    @ReactMethod
    public void getOutputs(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            if (!this.implementationsData.containsKey(uid))
            {
                this.mapImplementationsData(currentInstance);
            }
            ReadableNativeMap data = (ReadableNativeMap)this.implementationsData.get(uid);
            ReadableArray resultTmp = data.getArray("outputs");
            WritableNativeArray result = new WritableNativeArray();
            for (int i = 0; i < resultTmp.size(); i++)
            {
                WritableNativeMap result_elem = new WritableNativeMap();
                result_elem.merge(resultTmp.getMap(i));
                result.pushMap(result_elem);
            }
            promise.resolve(result);
        }
        else
        {
            promise.reject("Failed to call RCTCoreBitcoinLikePreparedTransaction::getOutputs", "First parameter of RCTCoreBitcoinLikePreparedTransaction::getOutputs should be an instance of RCTCoreBitcoinLikePreparedTransaction");
        }
    }

    @ReactMethod
    public void getLockTime(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            BitcoinLikePreparedTransaction javaObj = this.javaObjects.get(uid);
            int result = javaObj.getLockTime();
            WritableNativeMap resultMap = new WritableNativeMap();
            resultMap.putInt("value", result);
            promise.resolve(resultMap);
        }
        else
        {
            promise.reject("Failed to call RCTCoreBitcoinLikePreparedTransaction::getLockTime", "First parameter of RCTCoreBitcoinLikePreparedTransaction::getLockTime should be an instance of RCTCoreBitcoinLikePreparedTransaction");
        }
    }

}
