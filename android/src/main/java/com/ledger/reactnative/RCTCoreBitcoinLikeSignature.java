// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from bitcoin_like_wallet.djinni

package com.ledger.reactnative;

import co.ledger.core.BitcoinLikeSignature;
import com.facebook.react.bridge.Promise;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.bridge.ReadableNativeArray;
import com.facebook.react.bridge.ReadableNativeMap;
import com.facebook.react.bridge.WritableNativeArray;
import com.facebook.react.bridge.WritableNativeMap;
import com.facebook.react.module.annotations.ReactModule;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Optional;
import java.util.TimeZone;
import java.util.UUID;

/**
 * Structure representing DER encoded signature
 * DER format :
 * - DER prefix
 * - Length of rest of signature
 * - Marker for r value
 * - Length of r value
 * - r value, Big Endian
 * - Marker for s value
 * - Length of s value
 * - s value, Big Endian
 * - SIGHASH byte (ALL, NONE, SINGLE)
 */
@ReactModule(name = "RCTCoreBitcoinLikeSignature")
public class RCTCoreBitcoinLikeSignature extends ReactContextBaseJavaModule {
    private final ReactApplicationContext reactContext;
    private Map<String, BitcoinLikeSignature> javaObjects;
    public Map<String, BitcoinLikeSignature> getJavaObjects()
    {
        return javaObjects;
    }

    public RCTCoreBitcoinLikeSignature(ReactApplicationContext reactContext)
    {
        super(reactContext);
        this.reactContext = reactContext;
        this.javaObjects = new HashMap<String, BitcoinLikeSignature>();
    }

    @Override
    public String getName()
    {
        return "RCTCoreBitcoinLikeSignature";
    }
    @ReactMethod
    public void release(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            this.javaObjects.remove(uid);
            promise.resolve(0);
        }
        else
        {
            promise.reject("Failed to release instance of RCTCoreBitcoinLikeSignature", "First parameter of RCTCoreBitcoinLikeSignature::release should be an instance of RCTCoreBitcoinLikeSignature");
        }
    }
    @ReactMethod
    public void log(Promise promise)
    {
        WritableNativeArray result = new WritableNativeArray();
        for (Map.Entry<String, BitcoinLikeSignature> elem : this.javaObjects.entrySet())
        {
            result.pushString(elem.getKey());
        }
        promise.resolve(result);
    }
    @ReactMethod
    public void flush(Promise promise)
    {
        this.javaObjects.clear();
        promise.resolve(0);
    }
    @ReactMethod
    public void isNull(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            if (this.javaObjects.get(uid) == null)
            {
                promise.resolve(true);
                return;
            }
            else
            {
                promise.resolve(false);
                return;
            }
        }
        promise.resolve(true);
    }
    public static byte[] hexStringToByteArray(String hexString)
    {
        int hexStringLength = hexString.length();
        byte[] data = new byte[hexStringLength / 2];
        for (int i = 0; i < hexStringLength; i += 2)
        {
            data[i / 2] = (byte) ((Character.digit(hexString.charAt(i), 16) << 4) + Character.digit(hexString.charAt(i+1), 16));
        }
        return data;
    }
    static final String HEXES = "0123456789ABCDEF";
    public static String byteArrayToHexString( byte [] data)
    {
        if (data == null)
        {
            return null;
        }
        final StringBuilder hexStringBuilder = new StringBuilder( 2 * data.length );
        for ( final byte b : data )
        {
            hexStringBuilder.append(HEXES.charAt((b & 0xF0) >> 4)).append(HEXES.charAt((b & 0x0F)));
        }
        return hexStringBuilder.toString();
    }

    @ReactMethod
    public void init(String r, String s, String v, Promise promise) {
        byte [] javaParam_0 = hexStringToByteArray(r);

        byte [] javaParam_1 = hexStringToByteArray(s);

        byte [] javaParam_2 = hexStringToByteArray(v);

        BitcoinLikeSignature javaResult = new BitcoinLikeSignature(javaParam_0, javaParam_1, javaParam_2);

        String uuid = UUID.randomUUID().toString();
        this.javaObjects.put(uuid, javaResult);
        WritableNativeMap finalResult = new WritableNativeMap();
        finalResult.putString("type","RCTCoreBitcoinLikeSignature");
        finalResult.putString("uid",uuid);
        promise.resolve(finalResult);
    }
    @ReactMethod
    public void getR(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            BitcoinLikeSignature javaObj = this.javaObjects.get(uid);
            byte[] result = javaObj.getR();
            String converted_result = byteArrayToHexString(result);
            WritableNativeMap resultMap = new WritableNativeMap();
            resultMap.putString("value", converted_result);
            promise.resolve(resultMap);
        }
        else
        {
            promise.reject("Failed to call RCTCoreBitcoinLikeSignature::getR", "First parameter of RCTCoreBitcoinLikeSignature::getR should be an instance of RCTCoreBitcoinLikeSignature");
        }
    }

    @ReactMethod
    public void getS(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            BitcoinLikeSignature javaObj = this.javaObjects.get(uid);
            byte[] result = javaObj.getS();
            String converted_result = byteArrayToHexString(result);
            WritableNativeMap resultMap = new WritableNativeMap();
            resultMap.putString("value", converted_result);
            promise.resolve(resultMap);
        }
        else
        {
            promise.reject("Failed to call RCTCoreBitcoinLikeSignature::getS", "First parameter of RCTCoreBitcoinLikeSignature::getS should be an instance of RCTCoreBitcoinLikeSignature");
        }
    }

    @ReactMethod
    public void getV(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            BitcoinLikeSignature javaObj = this.javaObjects.get(uid);
            byte[] result = javaObj.getV();
            String converted_result = byteArrayToHexString(result);
            WritableNativeMap resultMap = new WritableNativeMap();
            resultMap.putString("value", converted_result);
            promise.resolve(resultMap);
        }
        else
        {
            promise.reject("Failed to call RCTCoreBitcoinLikeSignature::getV", "First parameter of RCTCoreBitcoinLikeSignature::getV should be an instance of RCTCoreBitcoinLikeSignature");
        }
    }

}
