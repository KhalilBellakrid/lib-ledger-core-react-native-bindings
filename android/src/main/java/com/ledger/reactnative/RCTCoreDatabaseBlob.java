// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from database.djinni

package com.ledger.reactnative;

import co.ledger.core.DatabaseBlob;
import com.facebook.react.bridge.Promise;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.bridge.ReadableNativeArray;
import com.facebook.react.bridge.ReadableNativeMap;
import com.facebook.react.bridge.WritableNativeArray;
import com.facebook.react.bridge.WritableNativeMap;
import com.facebook.react.module.annotations.ReactModule;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Optional;
import java.util.UUID;

/** A wrapper around SQL blob type. BLOB (Binary Large Object) is a builtin SQL type to store bytes. */
@ReactModule(name = "RCTCoreDatabaseBlob")
public class RCTCoreDatabaseBlob extends ReactContextBaseJavaModule {

    private final ReactApplicationContext reactContext;
    private Map<String, DatabaseBlobImpl> javaObjects;
    public Map<String, DatabaseBlobImpl> getJavaObjects()
    {
        return javaObjects;
    }

    public RCTCoreDatabaseBlob(ReactApplicationContext reactContext)
    {
        super(reactContext);
        this.reactContext = reactContext;
        this.javaObjects = new HashMap<String, DatabaseBlobImpl>();
        WritableNativeMap.setUseNativeAccessor(true);
    }

    @Override
    public String getName()
    {
        return "RCTCoreDatabaseBlob";
    }
    @ReactMethod
    public void newInstance(Promise promise)
    {
        DatabaseBlobImpl newInstance = new DatabaseBlobImpl(this.reactContext);
        String uuid = UUID.randomUUID().toString();
        this.javaObjects.put(uuid, newInstance);
        WritableNativeMap finalResult = new WritableNativeMap();
        finalResult.putString("type","RCTCoreDatabaseBlob");
        finalResult.putString("uid",uuid);
        promise.resolve(finalResult);
    }
    @ReactMethod
    public void release(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            this.javaObjects.remove(uid);
            promise.resolve(0);
        }
        else
        {
            promise.reject("Failed to release instance of RCTCoreDatabaseBlob", "First parameter of RCTCoreDatabaseBlob::release should be an instance of RCTCoreDatabaseBlob");
        }
    }
    @ReactMethod
    public void log(Promise promise)
    {
        WritableNativeArray result = new WritableNativeArray();
        for (Map.Entry<String, DatabaseBlobImpl> elem : this.javaObjects.entrySet())
        {
            result.pushString(elem.getKey());
        }
        promise.resolve(result);
    }
    @ReactMethod
    public void flush(Promise promise)
    {
        this.javaObjects.clear();
        promise.resolve(0);
    }
    @ReactMethod
    public void isNull(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            if (this.javaObjects.get(uid) == null)
            {
                promise.resolve(true);
                return;
            }
            else
            {
                promise.resolve(false);
                return;
            }
        }
        promise.resolve(true);
    }
    public static byte[] hexStringToByteArray(String hexString)
    {
        int hexStringLength = hexString.length();
        byte[] data = new byte[hexStringLength / 2];
        for (int i = 0; i < hexStringLength; i += 2)
        {
            data[i / 2] = (byte) ((Character.digit(hexString.charAt(i), 16) << 4) + Character.digit(hexString.charAt(i+1), 16));
        }
        return data;
    }
    static final String HEXES = "0123456789ABCDEF";
    public static String byteArrayToHexString( byte [] data)
    {
        if (data == null)
        {
            return null;
        }
        final StringBuilder hexStringBuilder = new StringBuilder( 2 * data.length );
        for ( final byte b : data )
        {
            hexStringBuilder.append(HEXES.charAt((b & 0xF0) >> 4)).append(HEXES.charAt((b & 0x0F)));
        }
        return hexStringBuilder.toString();
    }

    /**
     * Reads bytes from the blob at the given offset and of the a given length and return them in a byte array.
     * @param offset Start to read bytes from the blob at offset value.
     * @param length Maximum number of byte read from the blob
     */
    @ReactMethod
    public void read(ReadableMap currentInstance, long offset, long length, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            DatabaseBlobImpl currentInstanceObj = this.javaObjects.get(sUid);

            byte[] javaResult = currentInstanceObj.read(offset, length);
            WritableNativeMap result = new WritableNativeMap();
            String finalJavaResult = byteArrayToHexString(javaResult);
            result.putString("value", finalJavaResult);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Write the given bytes at the given offset in the BLOB.
     * @return The number of written bytes
     */
    @ReactMethod
    public void write(ReadableMap currentInstance, long offset, String data, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            DatabaseBlobImpl currentInstanceObj = this.javaObjects.get(sUid);

            byte [] javaParam_1 = hexStringToByteArray(data);

            long javaResult = currentInstanceObj.write(offset, javaParam_1);
            WritableNativeMap result = new WritableNativeMap();
            result.putDouble("value", javaResult);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Append the given bytes to the BLOB.
     * @param The data to append to the BLOB
     * @return the number of bytes written
     */
    @ReactMethod
    public void append(ReadableMap currentInstance, String data, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            DatabaseBlobImpl currentInstanceObj = this.javaObjects.get(sUid);

            byte [] javaParam_0 = hexStringToByteArray(data);

            long javaResult = currentInstanceObj.append(javaParam_0);
            WritableNativeMap result = new WritableNativeMap();
            result.putDouble("value", javaResult);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Truncate the BLOB to the length given by the newLen parameter (in bytes).
     * @param newLen The final size of the BLOB
     * @return The number of byte truncated
     */
    @ReactMethod
    public void trim(ReadableMap currentInstance, long newLen, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            DatabaseBlobImpl currentInstanceObj = this.javaObjects.get(sUid);

            long javaResult = currentInstanceObj.trim(newLen);
            WritableNativeMap result = new WritableNativeMap();
            result.putDouble("value", javaResult);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Get the size of the BLOB.
     * @return the size of the BLOB in bytes.
     */
    @ReactMethod
    public void size(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            DatabaseBlobImpl currentInstanceObj = this.javaObjects.get(sUid);

            long javaResult = currentInstanceObj.size();
            WritableNativeMap result = new WritableNativeMap();
            result.putDouble("value", javaResult);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
}
