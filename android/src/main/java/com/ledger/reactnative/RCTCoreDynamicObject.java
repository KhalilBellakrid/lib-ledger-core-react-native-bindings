// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from dynamic.djinni

package com.ledger.reactnative;

import co.ledger.core.DynamicArray;
import co.ledger.core.DynamicObject;
import co.ledger.core.DynamicType;
import com.facebook.react.bridge.Promise;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.bridge.ReadableNativeArray;
import com.facebook.react.bridge.ReadableNativeMap;
import com.facebook.react.bridge.WritableNativeArray;
import com.facebook.react.bridge.WritableNativeMap;
import com.facebook.react.module.annotations.ReactModule;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Optional;
import java.util.UUID;

/**
 * Class representing an object that stores values of different types of objects,
 * those values are appended dynamically in a map like structure with a given key through which they
 * can be retreived.
 */
@ReactModule(name = "RCTCoreDynamicObject")
public class RCTCoreDynamicObject extends ReactContextBaseJavaModule {

    private final ReactApplicationContext reactContext;
    private Map<String, DynamicObject> javaObjects;
    public Map<String, DynamicObject> getJavaObjects()
    {
        return javaObjects;
    }

    public RCTCoreDynamicObject(ReactApplicationContext reactContext)
    {
        super(reactContext);
        this.reactContext = reactContext;
        this.javaObjects = new HashMap<String, DynamicObject>();
        WritableNativeMap.setUseNativeAccessor(true);
    }

    @Override
    public String getName()
    {
        return "RCTCoreDynamicObject";
    }
    @ReactMethod
    public void release(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            this.javaObjects.remove(uid);
            promise.resolve(0);
        }
        else
        {
            promise.reject("Failed to release instance of RCTCoreDynamicObject", "First parameter of RCTCoreDynamicObject::release should be an instance of RCTCoreDynamicObject");
        }
    }
    @ReactMethod
    public void log(Promise promise)
    {
        WritableNativeArray result = new WritableNativeArray();
        for (Map.Entry<String, DynamicObject> elem : this.javaObjects.entrySet())
        {
            result.pushString(elem.getKey());
        }
        promise.resolve(result);
    }
    @ReactMethod
    public void flush(Promise promise)
    {
        this.javaObjects.clear();
        promise.resolve(0);
    }
    @ReactMethod
    public void isNull(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            if (this.javaObjects.get(uid) == null)
            {
                promise.resolve(true);
                return;
            }
            else
            {
                promise.resolve(false);
                return;
            }
        }
        promise.resolve(true);
    }
    public static byte[] hexStringToByteArray(String hexString)
    {
        int hexStringLength = hexString.length();
        byte[] data = new byte[hexStringLength / 2];
        for (int i = 0; i < hexStringLength; i += 2)
        {
            data[i / 2] = (byte) ((Character.digit(hexString.charAt(i), 16) << 4) + Character.digit(hexString.charAt(i+1), 16));
        }
        return data;
    }
    static final String HEXES = "0123456789ABCDEF";
    public static String byteArrayToHexString( byte [] data)
    {
        if (data == null)
        {
            return null;
        }
        final StringBuilder hexStringBuilder = new StringBuilder( 2 * data.length );
        for ( final byte b : data )
        {
            hexStringBuilder.append(HEXES.charAt((b & 0xF0) >> 4)).append(HEXES.charAt((b & 0x0F)));
        }
        return hexStringBuilder.toString();
    }

    /**
     * Store a string with a given key.
     * @param key, string, key to access stored value
     * @param value, string
     * @return DynamicObject object with value stored in it
     */
    @ReactMethod
    public void putString(ReadableMap currentInstance, String key, String value, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            DynamicObject currentInstanceObj = this.javaObjects.get(sUid);

            DynamicObject javaResult = currentInstanceObj.putString(key, value);

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreDynamicObject rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreDynamicObject.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreDynamicObject");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Store a 32-bit integer with a given key.
     * @param key, string, key to access stored value
     * @param value, 32-bit integer
     * @return DynamicObject object with value stored in it
     */
    @ReactMethod
    public void putInt(ReadableMap currentInstance, String key, int value, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            DynamicObject currentInstanceObj = this.javaObjects.get(sUid);

            DynamicObject javaResult = currentInstanceObj.putInt(key, value);

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreDynamicObject rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreDynamicObject.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreDynamicObject");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Store a 64-bit integer with a given key.
     * @param key, string, key to access stored value
     * @param value, 64-bit integer
     * @return DynamicObject object with value stored in it
     */
    @ReactMethod
    public void putLong(ReadableMap currentInstance, String key, long value, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            DynamicObject currentInstanceObj = this.javaObjects.get(sUid);

            DynamicObject javaResult = currentInstanceObj.putLong(key, value);

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreDynamicObject rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreDynamicObject.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreDynamicObject");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Store a double with a given key.
     * @param key, string, key to access stored value
     * @param value, double
     * @return DynamicObject object with value stored in it
     */
    @ReactMethod
    public void putDouble(ReadableMap currentInstance, String key, double value, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            DynamicObject currentInstanceObj = this.javaObjects.get(sUid);

            DynamicObject javaResult = currentInstanceObj.putDouble(key, value);

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreDynamicObject rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreDynamicObject.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreDynamicObject");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Store a binary integer with a given key.
     * @param key, string, key to access stored value
     * @param value, binary
     * @return DynamicObject object with value stored in it
     */
    @ReactMethod
    public void putData(ReadableMap currentInstance, String key, String value, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            DynamicObject currentInstanceObj = this.javaObjects.get(sUid);

            byte [] javaParam_1 = hexStringToByteArray(value);

            DynamicObject javaResult = currentInstanceObj.putData(key, javaParam_1);

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreDynamicObject rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreDynamicObject.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreDynamicObject");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Store a boolean integer with a given key.
     * @param key, string, key to access stored value
     * @param value, bool
     * @return DynamicObject object with value stored in it
     */
    @ReactMethod
    public void putBoolean(ReadableMap currentInstance, String key, boolean value, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            DynamicObject currentInstanceObj = this.javaObjects.get(sUid);

            DynamicObject javaResult = currentInstanceObj.putBoolean(key, value);

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreDynamicObject rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreDynamicObject.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreDynamicObject");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Store another DynamicObject object with a given key.
     * @param key, string, key to access stored value
     * @return DynamicObject object with value stored in it
     */
    @ReactMethod
    public void putObject(ReadableMap currentInstance, String key, ReadableMap value, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            DynamicObject currentInstanceObj = this.javaObjects.get(sUid);

            RCTCoreDynamicObject rctParam_value = this.reactContext.getNativeModule(RCTCoreDynamicObject.class);
            DynamicObject javaParam_1 = rctParam_value.getJavaObjects().get(value.getString("uid"));
            DynamicObject javaResult = currentInstanceObj.putObject(key, javaParam_1);

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreDynamicObject rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreDynamicObject.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreDynamicObject");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Store a DynamicArray object with a given key.
     * @param key, string, key to access stored reference
     * @return DynamicArray object with value stored in it
     */
    @ReactMethod
    public void putArray(ReadableMap currentInstance, String key, ReadableMap value, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            DynamicObject currentInstanceObj = this.javaObjects.get(sUid);

            RCTCoreDynamicArray rctParam_value = this.reactContext.getNativeModule(RCTCoreDynamicArray.class);
            DynamicArray javaParam_1 = rctParam_value.getJavaObjects().get(value.getString("uid"));
            DynamicObject javaResult = currentInstanceObj.putArray(key, javaParam_1);

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreDynamicObject rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreDynamicObject.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreDynamicObject");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Get, if exists, stored string having a specific key.
     * @param key, string, key of string to look for
     * @return Optional string
     */
    @ReactMethod
    public void getString(ReadableMap currentInstance, String key, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            DynamicObject currentInstanceObj = this.javaObjects.get(sUid);

            String javaResult = currentInstanceObj.getString(key);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("value", javaResult);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Get, if exists, stored 32 bits integer having a specific key.
     * @param key, string, key of 32 bits integer to look for
     * @return Optional 32 bits integer
     */
    @ReactMethod
    public void getInt(ReadableMap currentInstance, String key, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            DynamicObject currentInstanceObj = this.javaObjects.get(sUid);

            Integer javaResult = currentInstanceObj.getInt(key);
            WritableNativeMap result = new WritableNativeMap();
            if (javaResult == null)
            {
                promise.resolve(javaResult);
                return;
            }
            result.putInt("value", javaResult);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Get, if exists, stored 64 bits integer having a specific key.
     * @param key, string, key of 64 bits integer to look for
     * @return Optional 64 bits integer
     */
    @ReactMethod
    public void getLong(ReadableMap currentInstance, String key, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            DynamicObject currentInstanceObj = this.javaObjects.get(sUid);

            Long javaResult = currentInstanceObj.getLong(key);
            WritableNativeMap result = new WritableNativeMap();
            if (javaResult == null)
            {
                promise.resolve(javaResult);
                return;
            }
            result.putDouble("value", javaResult);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Get, if exists, stored double having a specific key.
     * @param key, string, key of double to look for
     * @return Optional double
     */
    @ReactMethod
    public void getDouble(ReadableMap currentInstance, String key, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            DynamicObject currentInstanceObj = this.javaObjects.get(sUid);

            Double javaResult = currentInstanceObj.getDouble(key);
            WritableNativeMap result = new WritableNativeMap();
            if (javaResult == null)
            {
                promise.resolve(javaResult);
                return;
            }
            result.putDouble("value", javaResult);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Get, if exists, stored binary having a specific key.
     * @param key, string, key of binary to look for
     * @return Optional binary
     */
    @ReactMethod
    public void getData(ReadableMap currentInstance, String key, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            DynamicObject currentInstanceObj = this.javaObjects.get(sUid);

            byte[] javaResult = currentInstanceObj.getData(key);
            WritableNativeMap result = new WritableNativeMap();
            String finalJavaResult = byteArrayToHexString(javaResult);
            result.putString("value", finalJavaResult);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Get, if exists, stored bool having a specific key.
     * @param key, string, key of bool to look for
     * @return Optional bool
     */
    @ReactMethod
    public void getBoolean(ReadableMap currentInstance, String key, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            DynamicObject currentInstanceObj = this.javaObjects.get(sUid);

            Boolean javaResult = currentInstanceObj.getBoolean(key);
            WritableNativeMap result = new WritableNativeMap();
            if (javaResult == null)
            {
                promise.resolve(javaResult);
                return;
            }
            result.putBoolean("value", javaResult);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Get, if exists, stored DynamicObject having a specific key.
     * @param key, string, key of DynamicObject to look for
     * @return Optional DynamicObject
     */
    @ReactMethod
    public void getObject(ReadableMap currentInstance, String key, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            DynamicObject currentInstanceObj = this.javaObjects.get(sUid);

            DynamicObject javaResult = currentInstanceObj.getObject(key);

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreDynamicObject rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreDynamicObject.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreDynamicObject");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Get, if exists, stored DynamicArray having a specific key.
     * @param key, string, key of DynamicArray to look for
     * @return Optional DynamicArray
     */
    @ReactMethod
    public void getArray(ReadableMap currentInstance, String key, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            DynamicObject currentInstanceObj = this.javaObjects.get(sUid);

            DynamicArray javaResult = currentInstanceObj.getArray(key);

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreDynamicArray rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreDynamicArray.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreDynamicArray");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Check if a key was used to store a value.
     * @param key, string, key to look for
     * @return bool
     */
    @ReactMethod
    public void contains(ReadableMap currentInstance, String key, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            DynamicObject currentInstanceObj = this.javaObjects.get(sUid);

            boolean javaResult = currentInstanceObj.contains(key);
            WritableNativeMap result = new WritableNativeMap();
            result.putBoolean("value", javaResult);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Delete key and value stored with it.
     * @param key, string, key to look for
     * @return bool, true if key exists and deletion succeeded, false otherwise
     */
    @ReactMethod
    public void remove(ReadableMap currentInstance, String key, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            DynamicObject currentInstanceObj = this.javaObjects.get(sUid);

            boolean javaResult = currentInstanceObj.remove(key);
            WritableNativeMap result = new WritableNativeMap();
            result.putBoolean("value", javaResult);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Get list of keys.
     * @return list of string, list all stored keys
     */
    @ReactMethod
    public void getKeys(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            DynamicObject currentInstanceObj = this.javaObjects.get(sUid);

            ArrayList<String> javaResult = currentInstanceObj.getKeys();
            WritableNativeMap result = new WritableNativeMap();
            WritableNativeArray javaResult_list = new WritableNativeArray();
            for(String javaResult_elem : javaResult)
            {
                javaResult_list.pushString(javaResult_elem);
            }
            result.putArray("value", javaResult_list);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Get type of object stored with specific key.
     * @param key, string, key to look for
     * @return Optional DynamicType enum entry
     */
    @ReactMethod
    public void getType(ReadableMap currentInstance, String key, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            DynamicObject currentInstanceObj = this.javaObjects.get(sUid);

            DynamicType javaResult = currentInstanceObj.getType(key);
            WritableNativeMap result = new WritableNativeMap();
            int finalJavaResult = javaResult.ordinal();
            result.putInt("value", finalJavaResult);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Dump whole object's content as string.
     * @return string
     */
    @ReactMethod
    public void dump(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            DynamicObject currentInstanceObj = this.javaObjects.get(sUid);

            String javaResult = currentInstanceObj.dump();
            WritableNativeMap result = new WritableNativeMap();
            result.putString("value", javaResult);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Serialize whole object to a binary.
     * @return binary
     */
    @ReactMethod
    public void serialize(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            DynamicObject currentInstanceObj = this.javaObjects.get(sUid);

            byte[] javaResult = currentInstanceObj.serialize();
            WritableNativeMap result = new WritableNativeMap();
            String finalJavaResult = byteArrayToHexString(javaResult);
            result.putString("value", finalJavaResult);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Get readonly status of object.
     * @param bool
     */
    @ReactMethod
    public void isReadOnly(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            DynamicObject currentInstanceObj = this.javaObjects.get(sUid);

            boolean javaResult = currentInstanceObj.isReadOnly();
            WritableNativeMap result = new WritableNativeMap();
            result.putBoolean("value", javaResult);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Get count of stored references.
     * @return 64 bits integer
     */
    @ReactMethod
    public void size(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            DynamicObject currentInstanceObj = this.javaObjects.get(sUid);

            long javaResult = currentInstanceObj.size();
            WritableNativeMap result = new WritableNativeMap();
            result.putDouble("value", javaResult);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Create a new instance of DynamicObject class.
     * @return DynamicObject instance
     */
    @ReactMethod
    public void newInstance(Promise promise) {
        try
        {
            DynamicObject javaResult = DynamicObject.newInstance();

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreDynamicObject rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreDynamicObject.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreDynamicObject");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Parse a binary to a DynamicObject.
     * @param serialized, binary to parse
     * @return Optional DynamicObject
     */
    @ReactMethod
    public void load(String serialized, Promise promise) {
        try
        {
            byte [] javaParam_0 = hexStringToByteArray(serialized);

            DynamicObject javaResult = DynamicObject.load(javaParam_0);

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreDynamicObject rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreDynamicObject.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreDynamicObject");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
}
