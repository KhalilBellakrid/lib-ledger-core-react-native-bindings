// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from tezos_like_wallet.djinni

package com.ledger.reactnative;

import co.ledger.core.AmountCallback;
import co.ledger.core.AmountListCallback;
import co.ledger.core.OperationQuery;
import co.ledger.core.TezosLikeOriginatedAccount;
import co.ledger.core.TezosLikeTransactionBuilder;
import co.ledger.core.TimePeriod;
import com.facebook.react.bridge.Promise;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.bridge.ReadableNativeArray;
import com.facebook.react.bridge.ReadableNativeMap;
import com.facebook.react.bridge.WritableNativeArray;
import com.facebook.react.bridge.WritableNativeMap;
import com.facebook.react.module.annotations.ReactModule;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Optional;
import java.util.TimeZone;
import java.util.UUID;

/** Class representing originated accounts */
@ReactModule(name = "RCTCoreTezosLikeOriginatedAccount")
public class RCTCoreTezosLikeOriginatedAccount extends ReactContextBaseJavaModule {

    private final ReactApplicationContext reactContext;
    private Map<String, TezosLikeOriginatedAccount> javaObjects;
    public Map<String, TezosLikeOriginatedAccount> getJavaObjects()
    {
        return javaObjects;
    }

    public RCTCoreTezosLikeOriginatedAccount(ReactApplicationContext reactContext)
    {
        super(reactContext);
        this.reactContext = reactContext;
        this.javaObjects = new HashMap<String, TezosLikeOriginatedAccount>();
        WritableNativeMap.setUseNativeAccessor(true);
    }

    @Override
    public String getName()
    {
        return "RCTCoreTezosLikeOriginatedAccount";
    }
    @ReactMethod
    public void release(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            this.javaObjects.remove(uid);
            promise.resolve(0);
        }
        else
        {
            promise.reject("Failed to release instance of RCTCoreTezosLikeOriginatedAccount", "First parameter of RCTCoreTezosLikeOriginatedAccount::release should be an instance of RCTCoreTezosLikeOriginatedAccount");
        }
    }
    @ReactMethod
    public void log(Promise promise)
    {
        WritableNativeArray result = new WritableNativeArray();
        for (Map.Entry<String, TezosLikeOriginatedAccount> elem : this.javaObjects.entrySet())
        {
            result.pushString(elem.getKey());
        }
        promise.resolve(result);
    }
    @ReactMethod
    public void flush(Promise promise)
    {
        this.javaObjects.clear();
        promise.resolve(0);
    }
    @ReactMethod
    public void isNull(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            if (this.javaObjects.get(uid) == null)
            {
                promise.resolve(true);
                return;
            }
            else
            {
                promise.resolve(false);
                return;
            }
        }
        promise.resolve(true);
    }

    /** Get address of originated account (prefixed with KT) */
    @ReactMethod
    public void getAddress(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            TezosLikeOriginatedAccount currentInstanceObj = this.javaObjects.get(sUid);

            String javaResult = currentInstanceObj.getAddress();
            WritableNativeMap result = new WritableNativeMap();
            result.putString("value", javaResult);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Get publicKey of originated account
     * Could be empty if not yet revealed
     */
    @ReactMethod
    public void getPublicKey(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            TezosLikeOriginatedAccount currentInstanceObj = this.javaObjects.get(sUid);

            String javaResult = currentInstanceObj.getPublicKey();
            WritableNativeMap result = new WritableNativeMap();
            result.putString("value", javaResult);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /** Get balance of originated account */
    @ReactMethod
    public void getBalance(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            TezosLikeOriginatedAccount currentInstanceObj = this.javaObjects.get(sUid);

            RCTCoreAmountCallback javaParam_0 = RCTCoreAmountCallback.initWithPromise(promise, this.reactContext);
            currentInstanceObj.getBalance(javaParam_0);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /** Get balance history of originated account */
    @ReactMethod
    public void getBalanceHistory(ReadableMap currentInstance, Date start, Date end, int period, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            TezosLikeOriginatedAccount currentInstanceObj = this.javaObjects.get(sUid);

            if (period < 0 || TimePeriod.values().length <= period)
            {
                promise.reject("Enum error", "Failed to get enum TimePeriod");
                return;
            }
            TimePeriod javaParam_2 = TimePeriod.values()[period];
            RCTCoreAmountListCallback javaParam_3 = RCTCoreAmountListCallback.initWithPromise(promise, this.reactContext);
            currentInstanceObj.getBalanceHistory(start, end, javaParam_2, javaParam_3);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Know if possible to spend from this account
     * By default originations from libcore set it to true
     */
    @ReactMethod
    public void isSpendable(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            TezosLikeOriginatedAccount currentInstanceObj = this.javaObjects.get(sUid);

            boolean javaResult = currentInstanceObj.isSpendable();
            WritableNativeMap result = new WritableNativeMap();
            result.putBoolean("value", javaResult);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Know if possible to delegate from this account
     * By default originations from libcore set it to true
     */
    @ReactMethod
    public void isDelegatable(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            TezosLikeOriginatedAccount currentInstanceObj = this.javaObjects.get(sUid);

            boolean javaResult = currentInstanceObj.isDelegatable();
            WritableNativeMap result = new WritableNativeMap();
            result.putBoolean("value", javaResult);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /** Get related operations to account */
    @ReactMethod
    public void queryOperations(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            TezosLikeOriginatedAccount currentInstanceObj = this.javaObjects.get(sUid);

            OperationQuery javaResult = currentInstanceObj.queryOperations();

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreOperationQuery rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreOperationQuery.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreOperationQuery");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /** Get builder to construct transaction on originated account */
    @ReactMethod
    public void buildTransaction(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            TezosLikeOriginatedAccount currentInstanceObj = this.javaObjects.get(sUid);

            TezosLikeTransactionBuilder javaResult = currentInstanceObj.buildTransaction();

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreTezosLikeTransactionBuilder rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreTezosLikeTransactionBuilder.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreTezosLikeTransactionBuilder");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
}
