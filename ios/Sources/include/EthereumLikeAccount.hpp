// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from ethereum_like_wallet.djinni

#ifndef DJINNI_GENERATED_ETHEREUMLIKEACCOUNT_HPP
#define DJINNI_GENERATED_ETHEREUMLIKEACCOUNT_HPP

#include <cstdint>
#include <memory>
#include <string>
#include <vector>

namespace ledger { namespace core { namespace api {

class BigIntCallback;
class ERC20LikeAccount;
class EthereumLikeTransaction;
class EthereumLikeTransactionBuilder;
class StringCallback;

/** Class representing a Ethereum account. */
class EthereumLikeAccount {
public:
    virtual ~EthereumLikeAccount() {}

    /** Send a raw (binary) transaction on the Ethereum blockchain. */
    virtual void broadcastRawTransaction(const std::vector<uint8_t> & transaction, const std::shared_ptr<StringCallback> & callback) = 0;

    /** Send a transaction on the Ethereum blockchain. */
    virtual void broadcastTransaction(const std::shared_ptr<EthereumLikeTransaction> & transaction, const std::shared_ptr<StringCallback> & callback) = 0;

    /** Get a builder object to construct transactions. */
    virtual std::shared_ptr<EthereumLikeTransactionBuilder> buildTransaction() = 0;

    /** Get the list of ERC20 accounts associated with this Ethereum account. */
    virtual std::vector<std::shared_ptr<ERC20LikeAccount>> getERC20Accounts() = 0;

    /**
     * Get gas price from network
     * Note: same note as for getFees method on BitcoinLikeAccount
     */
    virtual void getGasPrice(const std::shared_ptr<BigIntCallback> & callback) = 0;

    /**
     * Get estimated gas limit to set so the transaction will succeed
     * The passed address could be EOA or contract
     * This estimation is based on X last incoming txs (to address) that succeeded
     * Note: same note as for getFees method on BitcoinLikeAccount
     */
    virtual void getEstimatedGasLimit(const std::string & address, const std::shared_ptr<BigIntCallback> & callback) = 0;
};

} } }  // namespace ledger::core::api
#endif //DJINNI_GENERATED_ETHEREUMLIKEACCOUNT_HPP
