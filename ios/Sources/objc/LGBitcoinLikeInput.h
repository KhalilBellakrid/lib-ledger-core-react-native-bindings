// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from bitcoin_like_wallet.djinni

#import <Foundation/Foundation.h>
@class LGAmount;
@class LGBitcoinLikeOutput;
@class LGBitcoinLikeScript;
@class LGDerivationPath;
@protocol LGBinaryCallback;


/**Class representing Bitcoin inputs */
@interface LGBitcoinLikeInput : NSObject

/** Returns the address of the input (if an address can be computed) */
- (nullable NSString *)getAddress;

/**
 * Returns the public associated with the address. This value can be NULL if you are building a transaction with an
 * address which does not belong to your wallet.
 */
- (nonnull NSArray<NSData *> *)getPublicKeys;

/** Returns the derivation path of this input if the address is owned by the wallet */
- (nonnull NSArray<LGDerivationPath *> *)getDerivationPath;

/**
 * Returns the value of the amount. Depending on the backend this value may not exist if the input is not owned by
 * the wallet.
 */
- (nullable LGAmount *)getValue;

/**
 * Get the transaction hash of the output spent by this input. The result can be NULL if the output is not owned by
 * the wallet
 */
- (nullable NSString *)getPreviousTxHash;

/**
 * Get the index at which the output is located in the transaction output spent by this input. The result can be
 * NULL if the input does not belong to the wallet
 *Check whether input
 *@return Boolean, true if input belongs to coinbase transaction (reward for mining a block)
 */
- (BOOL)isCoinbase;

/**
 *Stored data cointained in coinbase
 *@return Optional String
 */
- (nullable NSString *)getCoinbase;

/**
 *Get output index, it identifies which UTXO from tht transaction to spend
 *@return Optional 32 bits integer, index of previous transaction
 */
- (nullable NSNumber *)getPreviousOutputIndex;

/**
 * Retrieve the output spent by this input. Depending on the implementation this method may
 * use a lock to fetch data from a database. Therefore it may have poor performance, use with
 * caution.
 * @return The output spent by this input.
 */
- (nullable LGBitcoinLikeOutput *)getPreviousOuput;

/** Get ScriptSig of this input. The scriptsig is the first half of a script necessary to spend a previous output. */
- (nonnull NSData *)getScriptSig;

/** Parse the script sig to a [[BitcoinLikeScript]] */
- (nullable LGBitcoinLikeScript *)parseScriptSig;

/**
 * Set the ScriptS to the given value
 * @param scriptSig The ScriptSig to use for this input
 */
- (void)setScriptSig:(nonnull NSData *)scriptSig;

/** Push data to the end of the current ScriptSig */
- (void)pushToScriptSig:(nonnull NSData *)data;

/** Set the sequence number of this input */
- (void)setSequence:(int32_t)sequence;

/** Get the sequence number of this input */
- (int64_t)getSequence;

- (void)getPreviousTransaction:(nullable id<LGBinaryCallback>)callback;

/** Easy way to set the P2PKH script signature. Shorthand for input.pushToScriptSig(input.getPublicKeys()[0], signature) */
- (void)setP2PKHSigScript:(nonnull NSData *)signature;

@end
