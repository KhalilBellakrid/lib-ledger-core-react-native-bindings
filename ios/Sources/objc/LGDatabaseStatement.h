// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from database.djinni

#import <Foundation/Foundation.h>
@protocol LGDatabaseBlob;
@protocol LGDatabaseColumn;
@protocol LGDatabaseResultSet;


/**
 * A wrapper object around prepared SQL statements. lib-ledger-core will use placeholders when it needs to pass
 * parameters to a query. It will then  bind each parameter at a given position to a given value.
 */
@protocol LGDatabaseStatement

/**
 * Bind the designated parameter to the given 16bit integer value.
 * @param pos The position of the parameter in the query
 * @param value The value to bind
 */
- (void)bindShort:(int32_t)pos
            value:(int16_t)value;

/**
 * Bind the designated parameter to the given 32bit integer value.
 * @param pos The position of the parameter in the query
 * @param value The value to bind
 */
- (void)bindInt:(int32_t)pos
          value:(int32_t)value;

/**
 * Bind the designated parameter to the given 64bit integer value.
 * @param pos The position of the parameter in the query
 * @param value The value to bind
 */
- (void)bindLong:(int32_t)pos
           value:(int64_t)value;

/**
 * Bind the designated parameter to the given 32bit floating point number value.
 * @param pos The position of the parameter in the query
 * @param value The value to bind
 */
- (void)bindFloat:(int32_t)pos
            value:(float)value;

/**
 * Bind the designated parameter to the given 64bit floating point number value.
 * @param pos The position of the parameter in the query
 * @param value The value to bind
 */
- (void)bindDouble:(int32_t)pos
             value:(double)value;

/**
 * Bind the designated parameter to the given string.
 * @param pos The position of the parameter in the query
 * @param value The value to bind
 */
- (void)bindString:(int32_t)pos
             value:(nonnull NSString *)value;

/**
 * Bind the designated parameter to the given BLOB.
 * @param pos The position of the parameter in the query
 * @param value The value to bind
 */
- (void)bindBlob:(int32_t)pos
           value:(nullable id<LGDatabaseBlob>)value;

/**
 * Bind the designated parameter to the NULL value in SQL.
 * @param pos The position of the parameter in the query
 * @param value The value to bind
 */
- (void)bindNull:(int32_t)pos;

/**
 * Describe the metadata attached to the designated column (e.g. data type, column name...)
 * @return Column metadata descriptor
 */
- (nullable id<LGDatabaseColumn>)describeColumn:(int32_t)colNum;

/**
 * Get the number of column that will be available into the result row (e.g. "SELECT name, age FROM USERS"
 * would return 2).
 * @return The number of the columns available in the result
 */
- (int32_t)getColumnCount;

/**
 * Execute the statement with the past bound values.
 * @return The result of the execution of the statement on the database.
 */
- (nullable id<LGDatabaseResultSet>)execute;

/** Reset all bindings. This call is used before reusing a statement instance in order to repeat it multiple time. */
- (void)reset;

/** Close the statement and release all allocated resources. The statement shouldn't be used after this call. */
- (void)close;

@end
