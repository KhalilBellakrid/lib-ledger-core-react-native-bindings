// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from amount.djinni

#import "LGAmount+Private.h"
#import "LGAmount.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "LGBigInt+Private.h"
#import "LGCurrency+Private.h"
#import "LGCurrencyUnit+Private.h"
#import "LGFormatRules+Private.h"
#import "LGLocale+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface LGAmount ()

- (id)initWithCpp:(const std::shared_ptr<::ledger::core::api::Amount>&)cppRef;

@end

@implementation LGAmount {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::ledger::core::api::Amount>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::ledger::core::api::Amount>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (nullable LGBigInt *)toBigInt {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->toBigInt();
        return ::djinni_generated::BigInt::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull LGCurrency *)getCurrency {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getCurrency();
        return ::djinni_generated::Currency::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull LGCurrencyUnit *)getUnit {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getUnit();
        return ::djinni_generated::CurrencyUnit::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable LGAmount *)toUnit:(nonnull LGCurrencyUnit *)unit {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->toUnit(::djinni_generated::CurrencyUnit::toCpp(unit));
        return ::djinni_generated::Amount::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable LGAmount *)toMagnitude:(int32_t)magnitude {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->toMagnitude(::djinni::I32::toCpp(magnitude));
        return ::djinni_generated::Amount::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSString *)toString {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->toString();
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int64_t)toLong {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->toLong();
        return ::djinni::I64::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (double)toDouble {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->toDouble();
        return ::djinni::F64::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSString *)format:(nonnull LGLocale *)locale
                       rules:(nullable LGFormatRules *)rules {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->format(::djinni_generated::Locale::toCpp(locale),
                                                          ::djinni::Optional<std::experimental::optional, ::djinni_generated::FormatRules>::toCpp(rules));
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable LGAmount *)fromHex:(nonnull LGCurrency *)currency
                           hex:(nonnull NSString *)hex {
    try {
        auto objcpp_result_ = ::ledger::core::api::Amount::fromHex(::djinni_generated::Currency::toCpp(currency),
                                                                   ::djinni::String::toCpp(hex));
        return ::djinni_generated::Amount::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable LGAmount *)fromLong:(nonnull LGCurrency *)currency
                          value:(int64_t)value {
    try {
        auto objcpp_result_ = ::ledger::core::api::Amount::fromLong(::djinni_generated::Currency::toCpp(currency),
                                                                    ::djinni::I64::toCpp(value));
        return ::djinni_generated::Amount::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto Amount::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto Amount::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<LGAmount>(cpp);
}

}  // namespace djinni_generated

@end
