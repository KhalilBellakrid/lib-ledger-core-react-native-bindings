// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from bitcoin_like_wallet.djinni

#import "LGBitcoinLikeInput+Private.h"
#import "LGBitcoinLikeInput.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "LGAmount+Private.h"
#import "LGBinaryCallback+Private.h"
#import "LGBitcoinLikeOutput+Private.h"
#import "LGBitcoinLikeScript+Private.h"
#import "LGDerivationPath+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface LGBitcoinLikeInput ()

- (id)initWithCpp:(const std::shared_ptr<::ledger::core::api::BitcoinLikeInput>&)cppRef;

@end

@implementation LGBitcoinLikeInput {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::ledger::core::api::BitcoinLikeInput>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::ledger::core::api::BitcoinLikeInput>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (nullable NSString *)getAddress {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getAddress();
        return ::djinni::Optional<std::experimental::optional, ::djinni::String>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSArray<NSData *> *)getPublicKeys {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getPublicKeys();
        return ::djinni::List<::djinni::Binary>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSArray<LGDerivationPath *> *)getDerivationPath {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getDerivationPath();
        return ::djinni::List<::djinni_generated::DerivationPath>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable LGAmount *)getValue {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getValue();
        return ::djinni::Optional<std::experimental::optional, ::djinni_generated::Amount>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable NSString *)getPreviousTxHash {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getPreviousTxHash();
        return ::djinni::Optional<std::experimental::optional, ::djinni::String>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)isCoinbase {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->isCoinbase();
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable NSString *)getCoinbase {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getCoinbase();
        return ::djinni::Optional<std::experimental::optional, ::djinni::String>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable NSNumber *)getPreviousOutputIndex {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getPreviousOutputIndex();
        return ::djinni::Optional<std::experimental::optional, ::djinni::I32>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable LGBitcoinLikeOutput *)getPreviousOuput {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getPreviousOuput();
        return ::djinni_generated::BitcoinLikeOutput::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSData *)getScriptSig {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getScriptSig();
        return ::djinni::Binary::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable LGBitcoinLikeScript *)parseScriptSig {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->parseScriptSig();
        return ::djinni_generated::BitcoinLikeScript::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setScriptSig:(nonnull NSData *)scriptSig {
    try {
        _cppRefHandle.get()->setScriptSig(::djinni::Binary::toCpp(scriptSig));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)pushToScriptSig:(nonnull NSData *)data {
    try {
        _cppRefHandle.get()->pushToScriptSig(::djinni::Binary::toCpp(data));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setSequence:(int32_t)sequence {
    try {
        _cppRefHandle.get()->setSequence(::djinni::I32::toCpp(sequence));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int64_t)getSequence {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getSequence();
        return ::djinni::I64::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)getPreviousTransaction:(nullable id<LGBinaryCallback>)callback {
    try {
        _cppRefHandle.get()->getPreviousTransaction(::djinni_generated::BinaryCallback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setP2PKHSigScript:(nonnull NSData *)signature {
    try {
        _cppRefHandle.get()->setP2PKHSigScript(::djinni::Binary::toCpp(signature));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto BitcoinLikeInput::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto BitcoinLikeInput::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<LGBitcoinLikeInput>(cpp);
}

}  // namespace djinni_generated

@end
