// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from bitcoin_script.djinni

#import "LGBitcoinLikeScriptChunk+Private.h"
#import "LGBitcoinLikeScriptChunk.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "LGBitcoinLikeOperator+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface LGBitcoinLikeScriptChunk ()

- (id)initWithCpp:(const std::shared_ptr<::ledger::core::api::BitcoinLikeScriptChunk>&)cppRef;

@end

@implementation LGBitcoinLikeScriptChunk {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::ledger::core::api::BitcoinLikeScriptChunk>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::ledger::core::api::BitcoinLikeScriptChunk>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (BOOL)isOperator {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->isOperator();
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)isPushedData {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->isPushedData();
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable LGBitcoinLikeOperator *)getOperator {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getOperator();
        return ::djinni::Optional<std::experimental::optional, ::djinni_generated::BitcoinLikeOperator>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable NSData *)getPushedData {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getPushedData();
        return ::djinni::Optional<std::experimental::optional, ::djinni::Binary>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable LGBitcoinLikeScriptChunk *)next {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->next();
        return ::djinni_generated::BitcoinLikeScriptChunk::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)hasNext {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->hasNext();
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto BitcoinLikeScriptChunk::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto BitcoinLikeScriptChunk::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<LGBitcoinLikeScriptChunk>(cpp);
}

}  // namespace djinni_generated

@end
