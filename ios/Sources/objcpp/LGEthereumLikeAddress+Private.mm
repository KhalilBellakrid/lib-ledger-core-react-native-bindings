// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from addresses.djinni

#import "LGEthereumLikeAddress+Private.h"
#import "LGEthereumLikeAddress.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "LGEthereumLikeNetworkParameters+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface LGEthereumLikeAddress ()

- (id)initWithCpp:(const std::shared_ptr<::ledger::core::api::EthereumLikeAddress>&)cppRef;

@end

@implementation LGEthereumLikeAddress {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::ledger::core::api::EthereumLikeAddress>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::ledger::core::api::EthereumLikeAddress>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (nonnull NSData *)getVersion {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getVersion();
        return ::djinni::Binary::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSData *)getKeccakHash {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getKeccakHash();
        return ::djinni::Binary::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull LGEthereumLikeNetworkParameters *)getNetworkParameters {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getNetworkParameters();
        return ::djinni_generated::EthereumLikeNetworkParameters::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSString *)toEIP55 {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->toEIP55();
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto EthereumLikeAddress::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto EthereumLikeAddress::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<LGEthereumLikeAddress>(cpp);
}

}  // namespace djinni_generated

@end
