// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from emitter.djinni

#import "LGEventPublisher+Private.h"
#import "LGEventPublisher.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "LGEvent+Private.h"
#import "LGEventBus+Private.h"
#import "LGExecutionContext+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface LGEventPublisher ()

- (id)initWithCpp:(const std::shared_ptr<::ledger::core::api::EventPublisher>&)cppRef;

@end

@implementation LGEventPublisher {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::ledger::core::api::EventPublisher>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::ledger::core::api::EventPublisher>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (nullable LGEventBus *)getEventBus {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getEventBus();
        return ::djinni_generated::EventBus::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)post:(nullable LGEvent *)event {
    try {
        _cppRefHandle.get()->post(::djinni_generated::Event::toCpp(event));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)postSticky:(nullable LGEvent *)event
               tag:(int32_t)tag {
    try {
        _cppRefHandle.get()->postSticky(::djinni_generated::Event::toCpp(event),
                                        ::djinni::I32::toCpp(tag));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)relay:(nullable LGEventBus *)bus {
    try {
        _cppRefHandle.get()->relay(::djinni_generated::EventBus::toCpp(bus));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable LGEventPublisher *)newInstance:(nullable id<LGExecutionContext>)context {
    try {
        auto objcpp_result_ = ::ledger::core::api::EventPublisher::newInstance(::djinni_generated::ExecutionContext::toCpp(context));
        return ::djinni_generated::EventPublisher::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto EventPublisher::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto EventPublisher::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<LGEventPublisher>(cpp);
}

}  // namespace djinni_generated

@end
