// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from websocket_client.djinni

#import "LGWebSocketConnection+Private.h"
#import "LGWebSocketConnection.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "LGErrorCode+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface LGWebSocketConnection ()

- (id)initWithCpp:(const std::shared_ptr<::ledger::core::api::WebSocketConnection>&)cppRef;

@end

@implementation LGWebSocketConnection {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::ledger::core::api::WebSocketConnection>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::ledger::core::api::WebSocketConnection>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (void)onConnect:(int32_t)connectionId {
    try {
        _cppRefHandle.get()->onConnect(::djinni::I32::toCpp(connectionId));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)onClose {
    try {
        _cppRefHandle.get()->onClose();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)onMessage:(nonnull NSString *)data {
    try {
        _cppRefHandle.get()->onMessage(::djinni::String::toCpp(data));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)onError:(LGErrorCode)code
        message:(nonnull NSString *)message {
    try {
        _cppRefHandle.get()->onError(::djinni::Enum<::ledger::core::api::ErrorCode, LGErrorCode>::toCpp(code),
                                     ::djinni::String::toCpp(message));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int32_t)getConnectionId {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getConnectionId();
        return ::djinni::I32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto WebSocketConnection::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto WebSocketConnection::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<LGWebSocketConnection>(cpp);
}

}  // namespace djinni_generated

@end
