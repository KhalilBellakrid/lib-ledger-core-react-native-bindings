// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni

#import "RCTCoreBaseModule.h"

@implementation RCTCoreBaseModule

-(instancetype)init
{
    self = [super init];
    if(self)
    {
        self.objcImplementations = [[NSMutableDictionary alloc] init];
        self.implementationsData = [[NSMutableDictionary alloc] init];
    }
    return self;
}

-(void)baseRelease:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject
{
    if (!currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Invalid argument passed to release method: missing 'type' key", nil);
    }
    if (!currentInstance[@"uid"])
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling release method, first argument should be an instance of %@", currentInstance[@"type"]];
        reject(@"impl_call_error", error, nil);
    }
    @synchronized(self)
    {
        [self.objcImplementations removeObjectForKey:currentInstance[@"uid"]];
    }
    resolve(@(YES));
}

-(void)baseLogWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject
{
    NSMutableArray *uuids = [[NSMutableArray alloc] init];
    for (id key in self.objcImplementations)
    {
        [uuids addObject:key];
    }
    NSDictionary *result = @{@"value" : uuids};
    resolve(result);
}

-(void)baseFlushWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject
{
    @synchronized(self)
    {
        [self.objcImplementations removeAllObjects];
    }
    resolve(@(YES));
}

-(void)baseIsNull:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject
{
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        resolve(@(YES));
        return;
    }
    @synchronized(self)
    {
        if ([self.objcImplementations objectForKey:currentInstance[@"uid"]])
        {
            resolve(@(NO));
            return;
        }
        else
        {
            resolve(@(YES));
            return;
        }
    }
}

-(void)baseSetObject:(NSArray *)object
{
    //Should have first object as value and second one as key
    if ([object count] == 2)
    {
        @synchronized(self)
        {
            [self.objcImplementations setObject:[object objectAtIndex:0] forKey:[object objectAtIndex:1]];
        }
    }
}
@end
