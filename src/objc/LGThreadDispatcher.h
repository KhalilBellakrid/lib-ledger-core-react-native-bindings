// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from thread_dispatcher.djinni

#import <Foundation/Foundation.h>
@protocol LGExecutionContext;
@protocol LGLock;


/**Class representing a thread dispatcher */
@protocol LGThreadDispatcher

/**
 *Get an execution context where tasks are executed sequentially
 *@param name, string, name of execution context to retrieve
 *@return ExecutionContext object
 */
- (nullable id<LGExecutionContext>)getSerialExecutionContext:(nonnull NSString *)name;

/**
 *Get an execution context where tasks are executed in parallel thanks to a thread pool
 *where a system of inter-thread communication was designed
 *@param name, string, name of execution context to retrieve
 *@return ExecutionContext object
 */
- (nullable id<LGExecutionContext>)getThreadPoolExecutionContext:(nonnull NSString *)name;

/**
 *Get main execution context (generally where tasks that should never get blocked are executed)
 *@return ExecutionContext object
 */
- (nullable id<LGExecutionContext>)getMainExecutionContext;

/**
 *Get lock to handle multithreading
 *@return Lock object
 */
- (nullable id<LGLock>)newLock;

@end
