// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from database.djinni

#import "LGDatabaseBackend+Private.h"
#import "LGDatabaseBackend.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface LGDatabaseBackend ()

- (id)initWithCpp:(const std::shared_ptr<::ledger::core::api::DatabaseBackend>&)cppRef;

@end

@implementation LGDatabaseBackend {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::ledger::core::api::DatabaseBackend>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::ledger::core::api::DatabaseBackend>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (nullable LGDatabaseBackend *)setUsername:(nonnull NSString *)username {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->setUsername(::djinni::String::toCpp(username));
        return ::djinni_generated::DatabaseBackend::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable LGDatabaseBackend *)setPassword:(nonnull NSString *)pwd {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->setPassword(::djinni::String::toCpp(pwd));
        return ::djinni_generated::DatabaseBackend::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable LGDatabaseBackend *)setHost:(nonnull NSString *)host {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->setHost(::djinni::String::toCpp(host));
        return ::djinni_generated::DatabaseBackend::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable LGDatabaseBackend *)setHostAddr:(nonnull NSString *)hostAddr {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->setHostAddr(::djinni::String::toCpp(hostAddr));
        return ::djinni_generated::DatabaseBackend::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable LGDatabaseBackend *)setPort:(nonnull NSString *)port {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->setPort(::djinni::String::toCpp(port));
        return ::djinni_generated::DatabaseBackend::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable LGDatabaseBackend *)setOptions:(nonnull NSString *)opts {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->setOptions(::djinni::String::toCpp(opts));
        return ::djinni_generated::DatabaseBackend::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable LGDatabaseBackend *)setSslMode:(nonnull NSString *)mode {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->setSslMode(::djinni::String::toCpp(mode));
        return ::djinni_generated::DatabaseBackend::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable LGDatabaseBackend *)setKerberosName:(nonnull NSString *)name {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->setKerberosName(::djinni::String::toCpp(name));
        return ::djinni_generated::DatabaseBackend::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable LGDatabaseBackend *)setService:(nonnull NSString *)service {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->setService(::djinni::String::toCpp(service));
        return ::djinni_generated::DatabaseBackend::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable LGDatabaseBackend *)setConnectionPoolSize:(int32_t)size {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->setConnectionPoolSize(::djinni::I32::toCpp(size));
        return ::djinni_generated::DatabaseBackend::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable LGDatabaseBackend *)enableQueryLogging:(BOOL)enable {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->enableQueryLogging(::djinni::Bool::toCpp(enable));
        return ::djinni_generated::DatabaseBackend::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSString *)getUsername {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getUsername();
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSString *)getPassword {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getPassword();
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSString *)getHost {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getHost();
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSString *)getHostAddr {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getHostAddr();
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSString *)getPort {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getPort();
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSString *)getOptions {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getOptions();
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSString *)getSslMode {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getSslMode();
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSString *)getKerberosName {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getKerberosName();
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSString *)getService {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getService();
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int32_t)getConnectionPoolSize {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getConnectionPoolSize();
        return ::djinni::I32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)isLoggingEnabled {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->isLoggingEnabled();
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable LGDatabaseBackend *)getSqlite3Backend {
    try {
        auto objcpp_result_ = ::ledger::core::api::DatabaseBackend::getSqlite3Backend();
        return ::djinni_generated::DatabaseBackend::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable LGDatabaseBackend *)getPostgreSQLBackend {
    try {
        auto objcpp_result_ = ::ledger::core::api::DatabaseBackend::getPostgreSQLBackend();
        return ::djinni_generated::DatabaseBackend::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto DatabaseBackend::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto DatabaseBackend::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<LGDatabaseBackend>(cpp);
}

}  // namespace djinni_generated

@end
