// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from dynamic.djinni

#import "LGDynamicObject+Private.h"
#import "LGDynamicObject.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "LGDynamicArray+Private.h"
#import "LGDynamicType+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface LGDynamicObject ()

- (id)initWithCpp:(const std::shared_ptr<::ledger::core::api::DynamicObject>&)cppRef;

@end

@implementation LGDynamicObject {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::ledger::core::api::DynamicObject>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::ledger::core::api::DynamicObject>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (nullable LGDynamicObject *)putString:(nonnull NSString *)key
                                  value:(nonnull NSString *)value {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->putString(::djinni::String::toCpp(key),
                                                             ::djinni::String::toCpp(value));
        return ::djinni_generated::DynamicObject::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable LGDynamicObject *)putInt:(nonnull NSString *)key
                               value:(int32_t)value {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->putInt(::djinni::String::toCpp(key),
                                                          ::djinni::I32::toCpp(value));
        return ::djinni_generated::DynamicObject::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable LGDynamicObject *)putLong:(nonnull NSString *)key
                                value:(int64_t)value {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->putLong(::djinni::String::toCpp(key),
                                                           ::djinni::I64::toCpp(value));
        return ::djinni_generated::DynamicObject::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable LGDynamicObject *)putDouble:(nonnull NSString *)key
                                  value:(double)value {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->putDouble(::djinni::String::toCpp(key),
                                                             ::djinni::F64::toCpp(value));
        return ::djinni_generated::DynamicObject::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable LGDynamicObject *)putData:(nonnull NSString *)key
                                value:(nonnull NSData *)value {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->putData(::djinni::String::toCpp(key),
                                                           ::djinni::Binary::toCpp(value));
        return ::djinni_generated::DynamicObject::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable LGDynamicObject *)putBoolean:(nonnull NSString *)key
                                   value:(BOOL)value {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->putBoolean(::djinni::String::toCpp(key),
                                                              ::djinni::Bool::toCpp(value));
        return ::djinni_generated::DynamicObject::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable LGDynamicObject *)putObject:(nonnull NSString *)key
                                  value:(nullable LGDynamicObject *)value {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->putObject(::djinni::String::toCpp(key),
                                                             ::djinni_generated::DynamicObject::toCpp(value));
        return ::djinni_generated::DynamicObject::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable LGDynamicObject *)putArray:(nonnull NSString *)key
                                 value:(nullable LGDynamicArray *)value {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->putArray(::djinni::String::toCpp(key),
                                                            ::djinni_generated::DynamicArray::toCpp(value));
        return ::djinni_generated::DynamicObject::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable NSString *)getString:(nonnull NSString *)key {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getString(::djinni::String::toCpp(key));
        return ::djinni::Optional<std::experimental::optional, ::djinni::String>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable NSNumber *)getInt:(nonnull NSString *)key {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getInt(::djinni::String::toCpp(key));
        return ::djinni::Optional<std::experimental::optional, ::djinni::I32>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable NSNumber *)getLong:(nonnull NSString *)key {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getLong(::djinni::String::toCpp(key));
        return ::djinni::Optional<std::experimental::optional, ::djinni::I64>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable NSNumber *)getDouble:(nonnull NSString *)key {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getDouble(::djinni::String::toCpp(key));
        return ::djinni::Optional<std::experimental::optional, ::djinni::F64>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable NSData *)getData:(nonnull NSString *)key {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getData(::djinni::String::toCpp(key));
        return ::djinni::Optional<std::experimental::optional, ::djinni::Binary>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable NSNumber *)getBoolean:(nonnull NSString *)key {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getBoolean(::djinni::String::toCpp(key));
        return ::djinni::Optional<std::experimental::optional, ::djinni::Bool>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable LGDynamicObject *)getObject:(nonnull NSString *)key {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getObject(::djinni::String::toCpp(key));
        return ::djinni::Optional<std::experimental::optional, ::djinni_generated::DynamicObject>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable LGDynamicArray *)getArray:(nonnull NSString *)key {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getArray(::djinni::String::toCpp(key));
        return ::djinni::Optional<std::experimental::optional, ::djinni_generated::DynamicArray>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)contains:(nonnull NSString *)key {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->contains(::djinni::String::toCpp(key));
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)remove:(nonnull NSString *)key {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->remove(::djinni::String::toCpp(key));
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSArray<NSString *> *)getKeys {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getKeys();
        return ::djinni::List<::djinni::String>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable NSNumber *)getType:(nonnull NSString *)key {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getType(::djinni::String::toCpp(key));
        return ::djinni::Optional<std::experimental::optional, ::djinni::Enum<::ledger::core::api::DynamicType, LGDynamicType>>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSString *)dump {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->dump();
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSData *)serialize {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->serialize();
        return ::djinni::Binary::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)isReadOnly {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->isReadOnly();
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int64_t)size {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->size();
        return ::djinni::I64::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable LGDynamicObject *)newInstance {
    try {
        auto objcpp_result_ = ::ledger::core::api::DynamicObject::newInstance();
        return ::djinni_generated::DynamicObject::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable LGDynamicObject *)load:(nonnull NSData *)serialized {
    try {
        auto objcpp_result_ = ::ledger::core::api::DynamicObject::load(::djinni::Binary::toCpp(serialized));
        return ::djinni::Optional<std::experimental::optional, ::djinni_generated::DynamicObject>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto DynamicObject::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto DynamicObject::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<LGDynamicObject>(cpp);
}

}  // namespace djinni_generated

@end
