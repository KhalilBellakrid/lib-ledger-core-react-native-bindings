// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from http_client.djinni

#import "LGHttpRequest+Private.h"
#import "LGHttpRequest.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "LGError+Private.h"
#import "LGHttpMethod+Private.h"
#import "LGHttpUrlConnection+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface LGHttpRequest ()

- (id)initWithCpp:(const std::shared_ptr<::ledger::core::api::HttpRequest>&)cppRef;

@end

@implementation LGHttpRequest {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::ledger::core::api::HttpRequest>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::ledger::core::api::HttpRequest>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (LGHttpMethod)getMethod {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getMethod();
        return ::djinni::Enum<::ledger::core::api::HttpMethod, LGHttpMethod>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSDictionary<NSString *, NSString *> *)getHeaders {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getHeaders();
        return ::djinni::Map<::djinni::String, ::djinni::String>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSData *)getBody {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getBody();
        return ::djinni::Binary::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSString *)getUrl {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getUrl();
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)complete:(nullable id<LGHttpUrlConnection>)response
           error:(nullable LGError *)error {
    try {
        _cppRefHandle.get()->complete(::djinni::Optional<std::experimental::optional, ::djinni_generated::HttpUrlConnection>::toCpp(response),
                                      ::djinni::Optional<std::experimental::optional, ::djinni_generated::Error>::toCpp(error));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto HttpRequest::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto HttpRequest::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<LGHttpRequest>(cpp);
}

}  // namespace djinni_generated

@end
