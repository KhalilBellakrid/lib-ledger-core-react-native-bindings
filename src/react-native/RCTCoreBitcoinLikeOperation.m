// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from bitcoin_like_wallet.djinni

#import "RCTCoreBitcoinLikeOperation.h"


@implementation RCTCoreBitcoinLikeOperation
//Export module
RCT_EXPORT_MODULE(RCTCoreBitcoinLikeOperation)

@synthesize bridge = _bridge;

-(instancetype)init
{
    self = [super init];
    //Init Objc implementation
    if(self)
    {
        self.objcImplementations = [[NSMutableDictionary alloc] init];
    }
    return self;
}

+ (BOOL)requiresMainQueueSetup
{
    return NO;
}

/**
 *Get operation's transaction
 *@return BitcoinLikeTransaction object
 */
RCT_REMAP_METHOD(getTransaction,getTransaction:(NSDictionary *)currentInstance WithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreBitcoinLikeOperation::getTransaction, first argument should be an instance of BitcoinLikeOperation", nil);
    }
    BitcoinLikeOperation *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling BitcoinLikeOperation::getTransaction, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
    }
    BitcoinLikeTransaction * objcResult = [currentInstanceObj getTransaction];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreBitcoinLikeTransaction *rctImpl_objcResult = (RCTCoreBitcoinLikeTransaction *)[self.bridge moduleForName:@"CoreBitcoinLikeTransaction"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreBitcoinLikeTransaction", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling BitcoinLikeOperation::getTransaction", nil);
    }

}
@end
