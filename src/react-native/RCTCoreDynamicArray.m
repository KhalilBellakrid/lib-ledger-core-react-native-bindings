// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from dynamic.djinni

#import "RCTCoreDynamicArray.h"


@implementation RCTCoreDynamicArray
//Export module
RCT_EXPORT_MODULE(RCTCoreDynamicArray)

@synthesize bridge = _bridge;

-(instancetype)init
{
    self = [super init];
    //Init Objc implementation
    if(self)
    {
        self.objcImplementations = [[NSMutableDictionary alloc] init];
    }
    return self;
}

+ (BOOL)requiresMainQueueSetup
{
    return NO;
}

/**
 *Get count of stored references
 *@return 64 bits integer
 */
RCT_REMAP_METHOD(size,size:(NSDictionary *)currentInstance WithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreDynamicArray::size, first argument should be an instance of DynamicArray", nil);
    }
    DynamicArray *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling DynamicArray::size, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
    }
    int64_t objcResult = [currentInstanceObj size];
    NSDictionary *result = @{@"value" : @(objcResult)};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling DynamicArray::size", nil);
    }

}

/**
 *Push a 32 bits integer
 *@param value, 32 bits integer
 *@return DynamicArray with value stored in it
 */
RCT_REMAP_METHOD(pushInt,pushInt:(NSDictionary *)currentInstance withParams:(int32_t)value withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreDynamicArray::pushInt, first argument should be an instance of DynamicArray", nil);
    }
    DynamicArray *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling DynamicArray::pushInt, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
    }
    DynamicArray * objcResult = [currentInstanceObj pushInt:value];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreDynamicArray *rctImpl_objcResult = (RCTCoreDynamicArray *)[self.bridge moduleForName:@"CoreDynamicArray"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreDynamicArray", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling DynamicArray::pushInt", nil);
    }

}

/**
 *Push a 64 bits integer
 *@param value, 64 bits integer
 *@return DynamicArray with value stored in it
 */
RCT_REMAP_METHOD(pushLong,pushLong:(NSDictionary *)currentInstance withParams:(int64_t)value withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreDynamicArray::pushLong, first argument should be an instance of DynamicArray", nil);
    }
    DynamicArray *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling DynamicArray::pushLong, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
    }
    DynamicArray * objcResult = [currentInstanceObj pushLong:value];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreDynamicArray *rctImpl_objcResult = (RCTCoreDynamicArray *)[self.bridge moduleForName:@"CoreDynamicArray"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreDynamicArray", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling DynamicArray::pushLong", nil);
    }

}

/**
 *Push a string
 *@param value, string
 *@return DynamicArray with value stored in it
 */
RCT_REMAP_METHOD(pushString,pushString:(NSDictionary *)currentInstance withParams:(nonnull NSString *)value withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreDynamicArray::pushString, first argument should be an instance of DynamicArray", nil);
    }
    DynamicArray *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling DynamicArray::pushString, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
    }
    DynamicArray * objcResult = [currentInstanceObj pushString:value];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreDynamicArray *rctImpl_objcResult = (RCTCoreDynamicArray *)[self.bridge moduleForName:@"CoreDynamicArray"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreDynamicArray", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling DynamicArray::pushString", nil);
    }

}

/**
 *Push a double
 *@param value, double
 *@return DynamicArray with value stored in it
 */
RCT_REMAP_METHOD(pushDouble,pushDouble:(NSDictionary *)currentInstance withParams:(double)value withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreDynamicArray::pushDouble, first argument should be an instance of DynamicArray", nil);
    }
    DynamicArray *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling DynamicArray::pushDouble, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
    }
    DynamicArray * objcResult = [currentInstanceObj pushDouble:value];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreDynamicArray *rctImpl_objcResult = (RCTCoreDynamicArray *)[self.bridge moduleForName:@"CoreDynamicArray"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreDynamicArray", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling DynamicArray::pushDouble", nil);
    }

}

/**
 *Push a binary
 *@param value, binary
 *@return DynamicArray with value stored in it
 */
RCT_REMAP_METHOD(pushData,pushData:(NSDictionary *)currentInstance withParams:(nonnull NSData *)value withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreDynamicArray::pushData, first argument should be an instance of DynamicArray", nil);
    }
    DynamicArray *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling DynamicArray::pushData, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
    }
    DynamicArray * objcResult = [currentInstanceObj pushData:value];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreDynamicArray *rctImpl_objcResult = (RCTCoreDynamicArray *)[self.bridge moduleForName:@"CoreDynamicArray"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreDynamicArray", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling DynamicArray::pushData", nil);
    }

}

/**
 *Push a bool
 *@param value, bool
 *@return DynamicArray with value stored in it
 */
RCT_REMAP_METHOD(pushBoolean,pushBoolean:(NSDictionary *)currentInstance withParams:(BOOL)value withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreDynamicArray::pushBoolean, first argument should be an instance of DynamicArray", nil);
    }
    DynamicArray *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling DynamicArray::pushBoolean, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
    }
    DynamicArray * objcResult = [currentInstanceObj pushBoolean:value];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreDynamicArray *rctImpl_objcResult = (RCTCoreDynamicArray *)[self.bridge moduleForName:@"CoreDynamicArray"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreDynamicArray", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling DynamicArray::pushBoolean", nil);
    }

}

/**
 *Push a DynamicObject object
 *@param value, DynamicObject
 *@return DynamicArray with value stored in it
 */
RCT_REMAP_METHOD(pushObject,pushObject:(NSDictionary *)currentInstance withParams:(NSDictionary *)value withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreDynamicArray::pushObject, first argument should be an instance of DynamicArray", nil);
    }
    DynamicArray *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling DynamicArray::pushObject, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
    }
    RCTCoreDynamicObject *rctParam_value = (RCTCoreDynamicObject *)[self.bridge moduleForName:@"CoreDynamicObject"];
    DynamicObject *objcParam_0 = (DynamicObject *)[rctParam_value.objcImplementations objectForKey:value[@"uid"]];
    DynamicArray * objcResult = [currentInstanceObj pushObject:objcParam_0];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreDynamicArray *rctImpl_objcResult = (RCTCoreDynamicArray *)[self.bridge moduleForName:@"CoreDynamicArray"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreDynamicArray", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling DynamicArray::pushObject", nil);
    }

}

/**
 *Push a DynamicArray object
 *@param value, DynamicArray
 *@return DynamicArray with value stored in it
 */
RCT_REMAP_METHOD(pushArray,pushArray:(NSDictionary *)currentInstance withParams:(NSDictionary *)value withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreDynamicArray::pushArray, first argument should be an instance of DynamicArray", nil);
    }
    DynamicArray *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling DynamicArray::pushArray, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
    }
    RCTCoreDynamicArray *rctParam_value = (RCTCoreDynamicArray *)[self.bridge moduleForName:@"CoreDynamicArray"];
    DynamicArray *objcParam_0 = (DynamicArray *)[rctParam_value.objcImplementations objectForKey:value[@"uid"]];
    DynamicArray * objcResult = [currentInstanceObj pushArray:objcParam_0];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreDynamicArray *rctImpl_objcResult = (RCTCoreDynamicArray *)[self.bridge moduleForName:@"CoreDynamicArray"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreDynamicArray", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling DynamicArray::pushArray", nil);
    }

}

/**
 *Get string at a given index
 *@param index, 64 bits integer
 *@return Optional string
 */
RCT_REMAP_METHOD(getString,getString:(NSDictionary *)currentInstance withParams:(int64_t)index withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreDynamicArray::getString, first argument should be an instance of DynamicArray", nil);
    }
    DynamicArray *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling DynamicArray::getString, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
    }
    NSString * objcResult = [currentInstanceObj getString:index];
    NSDictionary *result = @{@"value" : objcResult};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling DynamicArray::getString", nil);
    }

}

/**
 *Get 32 bits integer at a given index
 *@param index, 64 bits integer
 *@return Optional 32 bits integer
 */
RCT_REMAP_METHOD(getInt,getInt:(NSDictionary *)currentInstance withParams:(int64_t)index withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreDynamicArray::getInt, first argument should be an instance of DynamicArray", nil);
    }
    DynamicArray *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling DynamicArray::getInt, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
    }
    NSNumber * objcResult = [currentInstanceObj getInt:index];
    NSDictionary *result = @{@"value" : objcResult};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling DynamicArray::getInt", nil);
    }

}

/**
 *Get 64 bits integer at a given index
 *@param index, 64 bits integer
 *@return Optional 64 bits integer
 */
RCT_REMAP_METHOD(getLong,getLong:(NSDictionary *)currentInstance withParams:(int64_t)index withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreDynamicArray::getLong, first argument should be an instance of DynamicArray", nil);
    }
    DynamicArray *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling DynamicArray::getLong, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
    }
    NSNumber * objcResult = [currentInstanceObj getLong:index];
    NSDictionary *result = @{@"value" : objcResult};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling DynamicArray::getLong", nil);
    }

}

/**
 *Get double at a given index
 *@param index, 64 bits integer
 *@return Optional double
 */
RCT_REMAP_METHOD(getDouble,getDouble:(NSDictionary *)currentInstance withParams:(int64_t)index withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreDynamicArray::getDouble, first argument should be an instance of DynamicArray", nil);
    }
    DynamicArray *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling DynamicArray::getDouble, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
    }
    NSNumber * objcResult = [currentInstanceObj getDouble:index];
    NSDictionary *result = @{@"value" : objcResult};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling DynamicArray::getDouble", nil);
    }

}

/**
 *Get binary at a given index
 *@param index, 64 bits integer
 *@return Optional binary
 */
RCT_REMAP_METHOD(getData,getData:(NSDictionary *)currentInstance withParams:(int64_t)index withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreDynamicArray::getData, first argument should be an instance of DynamicArray", nil);
    }
    DynamicArray *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling DynamicArray::getData, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
    }
    NSData * objcResult = [currentInstanceObj getData:index];
    NSDictionary *result = @{@"value" : objcResult};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling DynamicArray::getData", nil);
    }

}

/**
 *Get bool at a given index
 *@param index, 64 bits integer
 *@return Optional bool
 */
RCT_REMAP_METHOD(getBoolean,getBoolean:(NSDictionary *)currentInstance withParams:(int64_t)index withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreDynamicArray::getBoolean, first argument should be an instance of DynamicArray", nil);
    }
    DynamicArray *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling DynamicArray::getBoolean, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
    }
    NSNumber * objcResult = [currentInstanceObj getBoolean:index];
    NSDictionary *result = @{@"value" : objcResult};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling DynamicArray::getBoolean", nil);
    }

}

/**
 *Get DynamicObject object at a given index
 *@param index, 64 bits integer
 *@return Optional DynamicObject
 */
RCT_REMAP_METHOD(getObject,getObject:(NSDictionary *)currentInstance withParams:(int64_t)index withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreDynamicArray::getObject, first argument should be an instance of DynamicArray", nil);
    }
    DynamicArray *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling DynamicArray::getObject, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
    }
    DynamicObject * objcResult = [currentInstanceObj getObject:index];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreDynamicObject *rctImpl_objcResult = (RCTCoreDynamicObject *)[self.bridge moduleForName:@"CoreDynamicObject"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreDynamicObject", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling DynamicArray::getObject", nil);
    }

}

/**
 *Get DynamicArray object at a given index
 *@param index, 64 bits integer
 *@return Optional DynamicArray
 */
RCT_REMAP_METHOD(getArray,getArray:(NSDictionary *)currentInstance withParams:(int64_t)index withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreDynamicArray::getArray, first argument should be an instance of DynamicArray", nil);
    }
    DynamicArray *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling DynamicArray::getArray, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
    }
    DynamicArray * objcResult = [currentInstanceObj getArray:index];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreDynamicArray *rctImpl_objcResult = (RCTCoreDynamicArray *)[self.bridge moduleForName:@"CoreDynamicArray"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreDynamicArray", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling DynamicArray::getArray", nil);
    }

}

/**
 *Concatenate current DynamicArray with another one
 *@param array, DynamicArray object to concatenate with
 *@return DynamicArray object, concatenated DynamicArray
 */
RCT_REMAP_METHOD(concat,concat:(NSDictionary *)currentInstance withParams:(NSDictionary *)array withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreDynamicArray::concat, first argument should be an instance of DynamicArray", nil);
    }
    DynamicArray *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling DynamicArray::concat, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
    }
    RCTCoreDynamicArray *rctParam_array = (RCTCoreDynamicArray *)[self.bridge moduleForName:@"CoreDynamicArray"];
    DynamicArray *objcParam_0 = (DynamicArray *)[rctParam_array.objcImplementations objectForKey:array[@"uid"]];
    DynamicArray * objcResult = [currentInstanceObj concat:objcParam_0];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreDynamicArray *rctImpl_objcResult = (RCTCoreDynamicArray *)[self.bridge moduleForName:@"CoreDynamicArray"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreDynamicArray", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling DynamicArray::concat", nil);
    }

}

/**
 *Get type of value stored at a given index
 *@param index, 64 bits integer
 *@return Optional DynamicType enum entry
 */
RCT_REMAP_METHOD(getType,getType:(NSDictionary *)currentInstance withParams:(int64_t)index withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreDynamicArray::getType, first argument should be an instance of DynamicArray", nil);
    }
    DynamicArray *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling DynamicArray::getType, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
    }
    NSNumber * objcResult = [currentInstanceObj getType:index];
    NSDictionary *result = @{@"value" : objcResult};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling DynamicArray::getType", nil);
    }

}

/**
 *Delete value stored at given index
 *@param index, 64 bits integer
 *@return bool, true if deletion succeeded
 */
RCT_REMAP_METHOD(remove,remove:(NSDictionary *)currentInstance withParams:(int64_t)index withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreDynamicArray::remove, first argument should be an instance of DynamicArray", nil);
    }
    DynamicArray *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling DynamicArray::remove, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
    }
    BOOL objcResult = [currentInstanceObj remove:index];
    NSDictionary *result = @{@"value" : @(objcResult)};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling DynamicArray::remove", nil);
    }

}

/**
 *Dump whole object's content as string
 *@return string
 */
RCT_REMAP_METHOD(dump,dump:(NSDictionary *)currentInstance WithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreDynamicArray::dump, first argument should be an instance of DynamicArray", nil);
    }
    DynamicArray *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling DynamicArray::dump, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
    }
    NSString * objcResult = [currentInstanceObj dump];
    NSDictionary *result = @{@"value" : objcResult};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling DynamicArray::dump", nil);
    }

}

/**
 *Serialize whole object to a binary
 *@return binary
 */
RCT_REMAP_METHOD(serialize,serialize:(NSDictionary *)currentInstance WithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreDynamicArray::serialize, first argument should be an instance of DynamicArray", nil);
    }
    DynamicArray *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling DynamicArray::serialize, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
    }
    NSData * objcResult = [currentInstanceObj serialize];
    NSDictionary *result = @{@"value" : objcResult.description};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling DynamicArray::serialize", nil);
    }

}

/**
 *Get readonly status of object
 *@param bool
 */
RCT_REMAP_METHOD(isReadOnly,isReadOnly:(NSDictionary *)currentInstance WithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreDynamicArray::isReadOnly, first argument should be an instance of DynamicArray", nil);
    }
    DynamicArray *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling DynamicArray::isReadOnly, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
    }
    BOOL objcResult = [currentInstanceObj isReadOnly];
    NSDictionary *result = @{@"value" : @(objcResult)};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling DynamicArray::isReadOnly", nil);
    }

}

/**
 *Create a new instance of DynamicArray class
 *@return DynamicArray instance
 */
RCT_REMAP_METHOD(newInstance,newInstanceWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    DynamicArray * objcResult = [DynamicArray newInstance];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreDynamicArray *rctImpl_objcResult = (RCTCoreDynamicArray *)[self.bridge moduleForName:@"CoreDynamicArray"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreDynamicArray", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling DynamicArray::newInstance", nil);
    }

}

/**
 *Parse a binary to a DynamicArray
 *@param serialized, binary to parse
 *@return Optional DynamicArray
 */
RCT_REMAP_METHOD(load,loadwithParams:(nonnull NSData *)serialized withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    DynamicArray * objcResult = [DynamicArray load:serialized];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreDynamicArray *rctImpl_objcResult = (RCTCoreDynamicArray *)[self.bridge moduleForName:@"CoreDynamicArray"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreDynamicArray", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling DynamicArray::load", nil);
    }

}
@end
