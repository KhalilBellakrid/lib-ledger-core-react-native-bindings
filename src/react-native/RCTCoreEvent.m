// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from emitter.djinni

#import "RCTCoreEvent.h"


@implementation RCTCoreEvent
//Export module
RCT_EXPORT_MODULE(RCTCoreEvent)

@synthesize bridge = _bridge;

-(instancetype)init
{
    self = [super init];
    //Init Objc implementation
    if(self)
    {
        self.objcImplementations = [[NSMutableDictionary alloc] init];
    }
    return self;
}

+ (BOOL)requiresMainQueueSetup
{
    return NO;
}

/**
 *Get event code (for more details, please refer to EventCode enum)
 *@return EventCode enum entry
 */
RCT_REMAP_METHOD(getCode,getCode:(NSDictionary *)currentInstance WithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreEvent::getCode, first argument should be an instance of Event", nil);
    }
    Event *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling Event::getCode, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
    }
    EventCode objcResult = [currentInstanceObj getCode];
    NSDictionary *result = @{@"value" : @(objcResult)};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling Event::getCode", nil);
    }

}

/**
 *Get payload of event
 *@return DynamicObject object
 */
RCT_REMAP_METHOD(getPayload,getPayload:(NSDictionary *)currentInstance WithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreEvent::getPayload, first argument should be an instance of Event", nil);
    }
    Event *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling Event::getPayload, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
    }
    DynamicObject * objcResult = [currentInstanceObj getPayload];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreDynamicObject *rctImpl_objcResult = (RCTCoreDynamicObject *)[self.bridge moduleForName:@"CoreDynamicObject"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreDynamicObject", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling Event::getPayload", nil);
    }

}

/**
 *Know if event is sticky one
 *@return bool
 */
RCT_REMAP_METHOD(isSticky,isSticky:(NSDictionary *)currentInstance WithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreEvent::isSticky, first argument should be an instance of Event", nil);
    }
    Event *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling Event::isSticky, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
    }
    BOOL objcResult = [currentInstanceObj isSticky];
    NSDictionary *result = @{@"value" : @(objcResult)};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling Event::isSticky", nil);
    }

}

/**
 *If event is sticky, return sticky tag
 *@return 32 bits integer
 */
RCT_REMAP_METHOD(getStickyTag,getStickyTag:(NSDictionary *)currentInstance WithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreEvent::getStickyTag, first argument should be an instance of Event", nil);
    }
    Event *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling Event::getStickyTag, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
    }
    int32_t objcResult = [currentInstanceObj getStickyTag];
    NSDictionary *result = @{@"value" : @(objcResult)};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling Event::getStickyTag", nil);
    }

}

/**
 *Create a new instance of Event class
 *@param code, EventCode enum entry
 *@param payload, DynamicObject object
 *@return Event instance
 */
RCT_REMAP_METHOD(newInstance,newInstancewithParams:(EventCode)code
                                           payload:(NSDictionary *)payload withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    RCTCoreDynamicObject *rctParam_payload = (RCTCoreDynamicObject *)[self.bridge moduleForName:@"CoreDynamicObject"];
    DynamicObject *objcParam_1 = (DynamicObject *)[rctParam_payload.objcImplementations objectForKey:payload[@"uid"]];
    Event * objcResult = [Event newInstance:code payload:objcParam_1];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreEvent *rctImpl_objcResult = (RCTCoreEvent *)[self.bridge moduleForName:@"CoreEvent"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreEvent", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling Event::newInstance", nil);
    }

}
@end
