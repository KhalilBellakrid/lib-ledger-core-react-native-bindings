// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from emitter.djinni

#import "RCTCoreEventPublisher.h"


@implementation RCTCoreEventPublisher
//Export module
RCT_EXPORT_MODULE(RCTCoreEventPublisher)

@synthesize bridge = _bridge;

-(instancetype)init
{
    self = [super init];
    //Init Objc implementation
    if(self)
    {
        self.objcImplementations = [[NSMutableDictionary alloc] init];
    }
    return self;
}

+ (BOOL)requiresMainQueueSetup
{
    return NO;
}

/**
 *Get event bus through which publisher broadcast its events
 *@return EventBus object
 */
RCT_REMAP_METHOD(getEventBus,getEventBus:(NSDictionary *)currentInstance WithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreEventPublisher::getEventBus, first argument should be an instance of EventPublisher", nil);
    }
    EventPublisher *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling EventPublisher::getEventBus, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
    }
    EventBus * objcResult = [currentInstanceObj getEventBus];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreEventBus *rctImpl_objcResult = (RCTCoreEventBus *)[self.bridge moduleForName:@"CoreEventBus"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreEventBus", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling EventPublisher::getEventBus", nil);
    }

}

/**
 *Broadcast an event through eventbus (to all subscribed receivers to this EventBus)
 *@param event, Event object
 */
RCT_REMAP_METHOD(post,post:(NSDictionary *)currentInstance withParams:(NSDictionary *)event withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreEventPublisher::post, first argument should be an instance of EventPublisher", nil);
    }
    EventPublisher *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling EventPublisher::post, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
    }
    RCTCoreEvent *rctParam_event = (RCTCoreEvent *)[self.bridge moduleForName:@"CoreEvent"];
    Event *objcParam_0 = (Event *)[rctParam_event.objcImplementations objectForKey:event[@"uid"]];
    [currentInstanceObj post:objcParam_0];

}

/**
 *Same as post method but with an sticky event
 *@param event, Event object
 *@param tag, 32 bits integer, tag of sticky event
 */
RCT_REMAP_METHOD(postSticky,postSticky:(NSDictionary *)currentInstance withParams:(NSDictionary *)event
                                                                              tag:(int32_t)tag withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreEventPublisher::postSticky, first argument should be an instance of EventPublisher", nil);
    }
    EventPublisher *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling EventPublisher::postSticky, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
    }
    RCTCoreEvent *rctParam_event = (RCTCoreEvent *)[self.bridge moduleForName:@"CoreEvent"];
    Event *objcParam_0 = (Event *)[rctParam_event.objcImplementations objectForKey:event[@"uid"]];
    [currentInstanceObj postSticky:objcParam_0 tag:tag];

}

/**
 *Relay an event to another EventBus (other than EventPublisher's event bus)
 *@param bus, EventBus object, through which we want to broadcast EventPublisher's event to EventPublisher's receiver
 */
RCT_REMAP_METHOD(relay,relay:(NSDictionary *)currentInstance withParams:(NSDictionary *)bus withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreEventPublisher::relay, first argument should be an instance of EventPublisher", nil);
    }
    EventPublisher *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling EventPublisher::relay, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
    }
    RCTCoreEventBus *rctParam_bus = (RCTCoreEventBus *)[self.bridge moduleForName:@"CoreEventBus"];
    EventBus *objcParam_0 = (EventBus *)[rctParam_bus.objcImplementations objectForKey:bus[@"uid"]];
    [currentInstanceObj relay:objcParam_0];

}

/**
 *Create a new instance of EventPublisher class
 *@param context, executionContext object, context in which event publisher broadcast its events
 */
RCT_REMAP_METHOD(newInstance,newInstancewithParams:(NSDictionary *)context withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    RCTCoreExecutionContext *rctParam_context = (RCTCoreExecutionContext *)[self.bridge moduleForName:@"CoreExecutionContext"];
    id<ExecutionContext>objcParam_0 = (id<ExecutionContext>)[rctParam_context.objcImplementations objectForKey:context[@"uid"]];
    EventPublisher * objcResult = [EventPublisher newInstance:objcParam_0];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreEventPublisher *rctImpl_objcResult = (RCTCoreEventPublisher *)[self.bridge moduleForName:@"CoreEventPublisher"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreEventPublisher", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling EventPublisher::newInstance", nil);
    }

}
@end
