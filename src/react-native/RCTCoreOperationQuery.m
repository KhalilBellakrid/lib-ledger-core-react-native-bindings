// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from wallet.djinni

#import "RCTCoreOperationQuery.h"


@implementation RCTCoreOperationQuery
//Export module
RCT_EXPORT_MODULE(RCTCoreOperationQuery)

@synthesize bridge = _bridge;

-(instancetype)init
{
    self = [super init];
    //Init Objc implementation
    if(self)
    {
        self.objcImplementations = [[NSMutableDictionary alloc] init];
    }
    return self;
}

+ (BOOL)requiresMainQueueSetup
{
    return NO;
}

/**
 *Apply given order to query's operation
 *@param key, OperationOrderKey object which defines order
 *@param descending, bool
 *@return OperationQuery object, new ordered operation
 */
RCT_REMAP_METHOD(addOrder,addOrder:(NSDictionary *)currentInstance withParams:(OperationOrderKey)key
                                                                   descending:(BOOL)descending withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreOperationQuery::addOrder, first argument should be an instance of OperationQuery", nil);
    }
    OperationQuery *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling OperationQuery::addOrder, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
    }
    OperationQuery * objcResult = [currentInstanceObj addOrder:key descending:descending];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreOperationQuery *rctImpl_objcResult = (RCTCoreOperationQuery *)[self.bridge moduleForName:@"CoreOperationQuery"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreOperationQuery", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling OperationQuery::addOrder", nil);
    }

}

/**
 *Get applied filter on operation query
 *@return QueryFilter object
 */
RCT_REMAP_METHOD(filter,filter:(NSDictionary *)currentInstance WithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreOperationQuery::filter, first argument should be an instance of OperationQuery", nil);
    }
    OperationQuery *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling OperationQuery::filter, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
    }
    QueryFilter * objcResult = [currentInstanceObj filter];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreQueryFilter *rctImpl_objcResult = (RCTCoreQueryFilter *)[self.bridge moduleForName:@"CoreQueryFilter"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreQueryFilter", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling OperationQuery::filter", nil);
    }

}

/**
 *Add offset to the operation query
 *@param from, 64 bits integer
 */
RCT_REMAP_METHOD(offset,offset:(NSDictionary *)currentInstance withParams:(int64_t)from withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreOperationQuery::offset, first argument should be an instance of OperationQuery", nil);
    }
    OperationQuery *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling OperationQuery::offset, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
    }
    OperationQuery * objcResult = [currentInstanceObj offset:from];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreOperationQuery *rctImpl_objcResult = (RCTCoreOperationQuery *)[self.bridge moduleForName:@"CoreOperationQuery"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreOperationQuery", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling OperationQuery::offset", nil);
    }

}

/**
 *Add limit to the operation query results
 *@param count, 64 bits integer
 */
RCT_REMAP_METHOD(limit,limit:(NSDictionary *)currentInstance withParams:(int64_t)count withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreOperationQuery::limit, first argument should be an instance of OperationQuery", nil);
    }
    OperationQuery *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling OperationQuery::limit, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
    }
    OperationQuery * objcResult = [currentInstanceObj limit:count];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreOperationQuery *rctImpl_objcResult = (RCTCoreOperationQuery *)[self.bridge moduleForName:@"CoreOperationQuery"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreOperationQuery", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling OperationQuery::limit", nil);
    }

}

/**
 *TODO
 *Complete the operation query
 */
RCT_REMAP_METHOD(complete,complete:(NSDictionary *)currentInstance WithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreOperationQuery::complete, first argument should be an instance of OperationQuery", nil);
    }
    OperationQuery *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling OperationQuery::complete, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
    }
    OperationQuery * objcResult = [currentInstanceObj complete];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreOperationQuery *rctImpl_objcResult = (RCTCoreOperationQuery *)[self.bridge moduleForName:@"CoreOperationQuery"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreOperationQuery", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling OperationQuery::complete", nil);
    }

}

/**TODO */
RCT_REMAP_METHOD(partial,partial:(NSDictionary *)currentInstance WithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreOperationQuery::partial, first argument should be an instance of OperationQuery", nil);
    }
    OperationQuery *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling OperationQuery::partial, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
    }
    OperationQuery * objcResult = [currentInstanceObj partial];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreOperationQuery *rctImpl_objcResult = (RCTCoreOperationQuery *)[self.bridge moduleForName:@"CoreOperationQuery"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreOperationQuery", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling OperationQuery::partial", nil);
    }

}

/**
 *Execute query to retrieve operations
 *@param callback, if execute method succeed, ListCallback object returning a List of Operation objects
 */
RCT_REMAP_METHOD(execute,execute:(NSDictionary *)currentInstance WithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreOperationQuery::execute, first argument should be an instance of OperationQuery", nil);
    }
    OperationQuery *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling OperationQuery::execute, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
    }
    RCTCoreOperationListCallback *objcParam_0 = [[RCTCoreOperationListCallback alloc] initWithResolver:resolve rejecter:reject andBridge:self.bridge];
    [currentInstanceObj execute:objcParam_0];

}
@end
