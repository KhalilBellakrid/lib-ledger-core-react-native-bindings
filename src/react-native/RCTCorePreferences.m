// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from preferences.djinni

#import "RCTCorePreferences.h"


@implementation RCTCorePreferences
//Export module
RCT_EXPORT_MODULE(RCTCorePreferences)

@synthesize bridge = _bridge;

-(instancetype)init
{
    self = [super init];
    //Init Objc implementation
    if(self)
    {
        self.objcImplementations = [[NSMutableDictionary alloc] init];
    }
    return self;
}

+ (BOOL)requiresMainQueueSetup
{
    return NO;
}

/**
 * Retrieves the value associated with the given key or fallback to the default value.
 * @return The data associated with the key or fallbackValue.
 */
RCT_REMAP_METHOD(getString,getString:(NSDictionary *)currentInstance withParams:(nonnull NSString *)key
                                                                  fallbackValue:(nonnull NSString *)fallbackValue withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCorePreferences::getString, first argument should be an instance of Preferences", nil);
    }
    Preferences *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling Preferences::getString, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
    }
    NSString * objcResult = [currentInstanceObj getString:key fallbackValue:fallbackValue];
    NSDictionary *result = @{@"value" : objcResult};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling Preferences::getString", nil);
    }

}

/**
 * Retrieves the value associated with the given key or fallback to the default value.
 * @return The data associated with the key or fallbackValue.
 */
RCT_REMAP_METHOD(getInt,getInt:(NSDictionary *)currentInstance withParams:(nonnull NSString *)key
                                                            fallbackValue:(int32_t)fallbackValue withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCorePreferences::getInt, first argument should be an instance of Preferences", nil);
    }
    Preferences *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling Preferences::getInt, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
    }
    int32_t objcResult = [currentInstanceObj getInt:key fallbackValue:fallbackValue];
    NSDictionary *result = @{@"value" : @(objcResult)};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling Preferences::getInt", nil);
    }

}

/**
 * Retrieves the value associated with the given key or fallback to the default value.
 * @return The data associated with the key or fallbackValue.
 */
RCT_REMAP_METHOD(getLong,getLong:(NSDictionary *)currentInstance withParams:(nonnull NSString *)key
                                                              fallbackValue:(int64_t)fallbackValue withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCorePreferences::getLong, first argument should be an instance of Preferences", nil);
    }
    Preferences *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling Preferences::getLong, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
    }
    int64_t objcResult = [currentInstanceObj getLong:key fallbackValue:fallbackValue];
    NSDictionary *result = @{@"value" : @(objcResult)};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling Preferences::getLong", nil);
    }

}

/**
 * Retrieves the value associated with the given key or fallback to the default value.
 * @return The data associated with the key or fallbackValue.
 */
RCT_REMAP_METHOD(getBoolean,getBoolean:(NSDictionary *)currentInstance withParams:(nonnull NSString *)key
                                                                    fallbackValue:(BOOL)fallbackValue withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCorePreferences::getBoolean, first argument should be an instance of Preferences", nil);
    }
    Preferences *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling Preferences::getBoolean, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
    }
    BOOL objcResult = [currentInstanceObj getBoolean:key fallbackValue:fallbackValue];
    NSDictionary *result = @{@"value" : @(objcResult)};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling Preferences::getBoolean", nil);
    }

}

/**
 * Retrieves the value associated with the given key or fallback to the default value.
 * @return The data associated with the key or fallbackValue.
 */
RCT_REMAP_METHOD(getStringArray,getStringArray:(NSDictionary *)currentInstance withParams:(nonnull NSString *)key
                                                                            fallbackValue:(nonnull NSArray<NSString *> *)fallbackValue withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCorePreferences::getStringArray, first argument should be an instance of Preferences", nil);
    }
    Preferences *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling Preferences::getStringArray, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
    }
    NSArray<NSString *> * objcResult = [currentInstanceObj getStringArray:key fallbackValue:fallbackValue];
    NSDictionary *result = @{@"value" : objcResult};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling Preferences::getStringArray", nil);
    }

}

/**
 * Retrieves the value associated with the given key or fallback to the default value.
 * @return The data associated with the key or fallbackValue.
 */
RCT_REMAP_METHOD(getData,getData:(NSDictionary *)currentInstance withParams:(nonnull NSString *)key
                                                              fallbackValue:(nonnull NSData *)fallbackValue withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCorePreferences::getData, first argument should be an instance of Preferences", nil);
    }
    Preferences *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling Preferences::getData, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
    }
    NSData * objcResult = [currentInstanceObj getData:key fallbackValue:fallbackValue];
    NSDictionary *result = @{@"value" : objcResult.description};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling Preferences::getData", nil);
    }

}

/**
 * Checks whether the Preferences contains the given key.
 * @return true the preferences contains the key, false otherwise.
 */
RCT_REMAP_METHOD(contains,contains:(NSDictionary *)currentInstance withParams:(nonnull NSString *)key withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCorePreferences::contains, first argument should be an instance of Preferences", nil);
    }
    Preferences *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling Preferences::contains, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
    }
    BOOL objcResult = [currentInstanceObj contains:key];
    NSDictionary *result = @{@"value" : @(objcResult)};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling Preferences::contains", nil);
    }

}

/**
 * Get a preferences editor in order to add/modify/remove data.
 * @return An interface for editting preferences.
 */
RCT_REMAP_METHOD(edit,edit:(NSDictionary *)currentInstance WithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCorePreferences::edit, first argument should be an instance of Preferences", nil);
    }
    Preferences *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling Preferences::edit, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
    }
    PreferencesEditor * objcResult = [currentInstanceObj edit];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCorePreferencesEditor *rctImpl_objcResult = (RCTCorePreferencesEditor *)[self.bridge moduleForName:@"CorePreferencesEditor"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CorePreferencesEditor", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling Preferences::edit", nil);
    }

}
@end
