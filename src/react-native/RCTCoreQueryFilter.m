// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from wallet.djinni

#import "RCTCoreQueryFilter.h"


@implementation RCTCoreQueryFilter
//Export module
RCT_EXPORT_MODULE(RCTCoreQueryFilter)

@synthesize bridge = _bridge;

-(instancetype)init
{
    self = [super init];
    //Init Objc implementation
    if(self)
    {
        self.objcImplementations = [[NSMutableDictionary alloc] init];
    }
    return self;
}

+ (BOOL)requiresMainQueueSetup
{
    return NO;
}

RCT_REMAP_METHOD(accountEq,accountEqwithParams:(nonnull NSString *)accountUid withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    QueryFilter * objcResult = [QueryFilter accountEq:accountUid];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreQueryFilter *rctImpl_objcResult = (RCTCoreQueryFilter *)[self.bridge moduleForName:@"CoreQueryFilter"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreQueryFilter", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling QueryFilter::accountEq", nil);
    }

}

RCT_REMAP_METHOD(accountNeq,accountNeqwithParams:(nonnull NSString *)accountUid withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    QueryFilter * objcResult = [QueryFilter accountNeq:accountUid];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreQueryFilter *rctImpl_objcResult = (RCTCoreQueryFilter *)[self.bridge moduleForName:@"CoreQueryFilter"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreQueryFilter", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling QueryFilter::accountNeq", nil);
    }

}

RCT_REMAP_METHOD(dateLte,dateLtewithParams:(nonnull NSDate *)time withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    QueryFilter * objcResult = [QueryFilter dateLte:time];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreQueryFilter *rctImpl_objcResult = (RCTCoreQueryFilter *)[self.bridge moduleForName:@"CoreQueryFilter"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreQueryFilter", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling QueryFilter::dateLte", nil);
    }

}

RCT_REMAP_METHOD(dateLt,dateLtwithParams:(nonnull NSDate *)time withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    QueryFilter * objcResult = [QueryFilter dateLt:time];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreQueryFilter *rctImpl_objcResult = (RCTCoreQueryFilter *)[self.bridge moduleForName:@"CoreQueryFilter"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreQueryFilter", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling QueryFilter::dateLt", nil);
    }

}

RCT_REMAP_METHOD(dateGt,dateGtwithParams:(nonnull NSDate *)time withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    QueryFilter * objcResult = [QueryFilter dateGt:time];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreQueryFilter *rctImpl_objcResult = (RCTCoreQueryFilter *)[self.bridge moduleForName:@"CoreQueryFilter"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreQueryFilter", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling QueryFilter::dateGt", nil);
    }

}

RCT_REMAP_METHOD(dateGte,dateGtewithParams:(nonnull NSDate *)time withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    QueryFilter * objcResult = [QueryFilter dateGte:time];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreQueryFilter *rctImpl_objcResult = (RCTCoreQueryFilter *)[self.bridge moduleForName:@"CoreQueryFilter"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreQueryFilter", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling QueryFilter::dateGte", nil);
    }

}

RCT_REMAP_METHOD(dateEq,dateEqwithParams:(nonnull NSDate *)time withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    QueryFilter * objcResult = [QueryFilter dateEq:time];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreQueryFilter *rctImpl_objcResult = (RCTCoreQueryFilter *)[self.bridge moduleForName:@"CoreQueryFilter"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreQueryFilter", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling QueryFilter::dateEq", nil);
    }

}

RCT_REMAP_METHOD(dateNeq,dateNeqwithParams:(nonnull NSDate *)time withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    QueryFilter * objcResult = [QueryFilter dateNeq:time];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreQueryFilter *rctImpl_objcResult = (RCTCoreQueryFilter *)[self.bridge moduleForName:@"CoreQueryFilter"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreQueryFilter", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling QueryFilter::dateNeq", nil);
    }

}

RCT_REMAP_METHOD(containsRecipient,containsRecipientwithParams:(nonnull NSString *)recipientAddress withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    QueryFilter * objcResult = [QueryFilter containsRecipient:recipientAddress];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreQueryFilter *rctImpl_objcResult = (RCTCoreQueryFilter *)[self.bridge moduleForName:@"CoreQueryFilter"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreQueryFilter", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling QueryFilter::containsRecipient", nil);
    }

}

RCT_REMAP_METHOD(containsSender,containsSenderwithParams:(nonnull NSString *)senderAddress withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    QueryFilter * objcResult = [QueryFilter containsSender:senderAddress];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreQueryFilter *rctImpl_objcResult = (RCTCoreQueryFilter *)[self.bridge moduleForName:@"CoreQueryFilter"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreQueryFilter", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling QueryFilter::containsSender", nil);
    }

}

RCT_REMAP_METHOD(currencyEq,currencyEqwithParams:(nonnull NSString *)currencyName withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    QueryFilter * objcResult = [QueryFilter currencyEq:currencyName];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreQueryFilter *rctImpl_objcResult = (RCTCoreQueryFilter *)[self.bridge moduleForName:@"CoreQueryFilter"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreQueryFilter", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling QueryFilter::currencyEq", nil);
    }

}

RCT_REMAP_METHOD(operationUidEq,operationUidEqwithParams:(nonnull NSString *)operationUid withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    QueryFilter * objcResult = [QueryFilter operationUidEq:operationUid];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreQueryFilter *rctImpl_objcResult = (RCTCoreQueryFilter *)[self.bridge moduleForName:@"CoreQueryFilter"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreQueryFilter", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling QueryFilter::operationUidEq", nil);
    }

}

RCT_REMAP_METHOD(operationUidNeq,operationUidNeqwithParams:(nonnull NSString *)operationUid withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    QueryFilter * objcResult = [QueryFilter operationUidNeq:operationUid];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreQueryFilter *rctImpl_objcResult = (RCTCoreQueryFilter *)[self.bridge moduleForName:@"CoreQueryFilter"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreQueryFilter", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling QueryFilter::operationUidNeq", nil);
    }

}

RCT_REMAP_METHOD(trustEq,trustEqwithParams:(TrustLevel)trust withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    QueryFilter * objcResult = [QueryFilter trustEq:trust];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreQueryFilter *rctImpl_objcResult = (RCTCoreQueryFilter *)[self.bridge moduleForName:@"CoreQueryFilter"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreQueryFilter", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling QueryFilter::trustEq", nil);
    }

}

RCT_REMAP_METHOD(trustNeq,trustNeqwithParams:(TrustLevel)trust withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    QueryFilter * objcResult = [QueryFilter trustNeq:trust];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreQueryFilter *rctImpl_objcResult = (RCTCoreQueryFilter *)[self.bridge moduleForName:@"CoreQueryFilter"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreQueryFilter", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling QueryFilter::trustNeq", nil);
    }

}

RCT_REMAP_METHOD(feesEq,feesEqwithParams:(NSDictionary *)amount withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    RCTCoreAmount *rctParam_amount = (RCTCoreAmount *)[self.bridge moduleForName:@"CoreAmount"];
    Amount *objcParam_0 = (Amount *)[rctParam_amount.objcImplementations objectForKey:amount[@"uid"]];
    QueryFilter * objcResult = [QueryFilter feesEq:objcParam_0];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreQueryFilter *rctImpl_objcResult = (RCTCoreQueryFilter *)[self.bridge moduleForName:@"CoreQueryFilter"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreQueryFilter", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling QueryFilter::feesEq", nil);
    }

}

RCT_REMAP_METHOD(feesNeq,feesNeqwithParams:(NSDictionary *)amount withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    RCTCoreAmount *rctParam_amount = (RCTCoreAmount *)[self.bridge moduleForName:@"CoreAmount"];
    Amount *objcParam_0 = (Amount *)[rctParam_amount.objcImplementations objectForKey:amount[@"uid"]];
    QueryFilter * objcResult = [QueryFilter feesNeq:objcParam_0];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreQueryFilter *rctImpl_objcResult = (RCTCoreQueryFilter *)[self.bridge moduleForName:@"CoreQueryFilter"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreQueryFilter", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling QueryFilter::feesNeq", nil);
    }

}

RCT_REMAP_METHOD(feesGte,feesGtewithParams:(NSDictionary *)amount withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    RCTCoreAmount *rctParam_amount = (RCTCoreAmount *)[self.bridge moduleForName:@"CoreAmount"];
    Amount *objcParam_0 = (Amount *)[rctParam_amount.objcImplementations objectForKey:amount[@"uid"]];
    QueryFilter * objcResult = [QueryFilter feesGte:objcParam_0];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreQueryFilter *rctImpl_objcResult = (RCTCoreQueryFilter *)[self.bridge moduleForName:@"CoreQueryFilter"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreQueryFilter", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling QueryFilter::feesGte", nil);
    }

}

RCT_REMAP_METHOD(feesGt,feesGtwithParams:(NSDictionary *)amount withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    RCTCoreAmount *rctParam_amount = (RCTCoreAmount *)[self.bridge moduleForName:@"CoreAmount"];
    Amount *objcParam_0 = (Amount *)[rctParam_amount.objcImplementations objectForKey:amount[@"uid"]];
    QueryFilter * objcResult = [QueryFilter feesGt:objcParam_0];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreQueryFilter *rctImpl_objcResult = (RCTCoreQueryFilter *)[self.bridge moduleForName:@"CoreQueryFilter"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreQueryFilter", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling QueryFilter::feesGt", nil);
    }

}

RCT_REMAP_METHOD(feesLte,feesLtewithParams:(NSDictionary *)amount withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    RCTCoreAmount *rctParam_amount = (RCTCoreAmount *)[self.bridge moduleForName:@"CoreAmount"];
    Amount *objcParam_0 = (Amount *)[rctParam_amount.objcImplementations objectForKey:amount[@"uid"]];
    QueryFilter * objcResult = [QueryFilter feesLte:objcParam_0];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreQueryFilter *rctImpl_objcResult = (RCTCoreQueryFilter *)[self.bridge moduleForName:@"CoreQueryFilter"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreQueryFilter", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling QueryFilter::feesLte", nil);
    }

}

RCT_REMAP_METHOD(feesLt,feesLtwithParams:(NSDictionary *)amount withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    RCTCoreAmount *rctParam_amount = (RCTCoreAmount *)[self.bridge moduleForName:@"CoreAmount"];
    Amount *objcParam_0 = (Amount *)[rctParam_amount.objcImplementations objectForKey:amount[@"uid"]];
    QueryFilter * objcResult = [QueryFilter feesLt:objcParam_0];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreQueryFilter *rctImpl_objcResult = (RCTCoreQueryFilter *)[self.bridge moduleForName:@"CoreQueryFilter"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreQueryFilter", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling QueryFilter::feesLt", nil);
    }

}

RCT_REMAP_METHOD(amountEq,amountEqwithParams:(NSDictionary *)amount withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    RCTCoreAmount *rctParam_amount = (RCTCoreAmount *)[self.bridge moduleForName:@"CoreAmount"];
    Amount *objcParam_0 = (Amount *)[rctParam_amount.objcImplementations objectForKey:amount[@"uid"]];
    QueryFilter * objcResult = [QueryFilter amountEq:objcParam_0];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreQueryFilter *rctImpl_objcResult = (RCTCoreQueryFilter *)[self.bridge moduleForName:@"CoreQueryFilter"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreQueryFilter", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling QueryFilter::amountEq", nil);
    }

}

RCT_REMAP_METHOD(amountNeq,amountNeqwithParams:(NSDictionary *)amount withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    RCTCoreAmount *rctParam_amount = (RCTCoreAmount *)[self.bridge moduleForName:@"CoreAmount"];
    Amount *objcParam_0 = (Amount *)[rctParam_amount.objcImplementations objectForKey:amount[@"uid"]];
    QueryFilter * objcResult = [QueryFilter amountNeq:objcParam_0];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreQueryFilter *rctImpl_objcResult = (RCTCoreQueryFilter *)[self.bridge moduleForName:@"CoreQueryFilter"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreQueryFilter", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling QueryFilter::amountNeq", nil);
    }

}

RCT_REMAP_METHOD(amountGte,amountGtewithParams:(NSDictionary *)amount withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    RCTCoreAmount *rctParam_amount = (RCTCoreAmount *)[self.bridge moduleForName:@"CoreAmount"];
    Amount *objcParam_0 = (Amount *)[rctParam_amount.objcImplementations objectForKey:amount[@"uid"]];
    QueryFilter * objcResult = [QueryFilter amountGte:objcParam_0];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreQueryFilter *rctImpl_objcResult = (RCTCoreQueryFilter *)[self.bridge moduleForName:@"CoreQueryFilter"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreQueryFilter", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling QueryFilter::amountGte", nil);
    }

}

RCT_REMAP_METHOD(amountGt,amountGtwithParams:(NSDictionary *)amount withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    RCTCoreAmount *rctParam_amount = (RCTCoreAmount *)[self.bridge moduleForName:@"CoreAmount"];
    Amount *objcParam_0 = (Amount *)[rctParam_amount.objcImplementations objectForKey:amount[@"uid"]];
    QueryFilter * objcResult = [QueryFilter amountGt:objcParam_0];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreQueryFilter *rctImpl_objcResult = (RCTCoreQueryFilter *)[self.bridge moduleForName:@"CoreQueryFilter"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreQueryFilter", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling QueryFilter::amountGt", nil);
    }

}

RCT_REMAP_METHOD(amountLte,amountLtewithParams:(NSDictionary *)amount withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    RCTCoreAmount *rctParam_amount = (RCTCoreAmount *)[self.bridge moduleForName:@"CoreAmount"];
    Amount *objcParam_0 = (Amount *)[rctParam_amount.objcImplementations objectForKey:amount[@"uid"]];
    QueryFilter * objcResult = [QueryFilter amountLte:objcParam_0];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreQueryFilter *rctImpl_objcResult = (RCTCoreQueryFilter *)[self.bridge moduleForName:@"CoreQueryFilter"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreQueryFilter", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling QueryFilter::amountLte", nil);
    }

}

RCT_REMAP_METHOD(amountLt,amountLtwithParams:(NSDictionary *)amount withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    RCTCoreAmount *rctParam_amount = (RCTCoreAmount *)[self.bridge moduleForName:@"CoreAmount"];
    Amount *objcParam_0 = (Amount *)[rctParam_amount.objcImplementations objectForKey:amount[@"uid"]];
    QueryFilter * objcResult = [QueryFilter amountLt:objcParam_0];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreQueryFilter *rctImpl_objcResult = (RCTCoreQueryFilter *)[self.bridge moduleForName:@"CoreQueryFilter"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreQueryFilter", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling QueryFilter::amountLt", nil);
    }

}

RCT_REMAP_METHOD(blockHeightEq,blockHeightEqwithParams:(int64_t)blockHeight withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    QueryFilter * objcResult = [QueryFilter blockHeightEq:blockHeight];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreQueryFilter *rctImpl_objcResult = (RCTCoreQueryFilter *)[self.bridge moduleForName:@"CoreQueryFilter"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreQueryFilter", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling QueryFilter::blockHeightEq", nil);
    }

}

RCT_REMAP_METHOD(blockHeightNeq,blockHeightNeqwithParams:(int64_t)blockHeight withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    QueryFilter * objcResult = [QueryFilter blockHeightNeq:blockHeight];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreQueryFilter *rctImpl_objcResult = (RCTCoreQueryFilter *)[self.bridge moduleForName:@"CoreQueryFilter"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreQueryFilter", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling QueryFilter::blockHeightNeq", nil);
    }

}

RCT_REMAP_METHOD(blockHeightGte,blockHeightGtewithParams:(int64_t)blockHeight withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    QueryFilter * objcResult = [QueryFilter blockHeightGte:blockHeight];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreQueryFilter *rctImpl_objcResult = (RCTCoreQueryFilter *)[self.bridge moduleForName:@"CoreQueryFilter"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreQueryFilter", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling QueryFilter::blockHeightGte", nil);
    }

}

RCT_REMAP_METHOD(blockHeightGt,blockHeightGtwithParams:(int64_t)blockHeight withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    QueryFilter * objcResult = [QueryFilter blockHeightGt:blockHeight];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreQueryFilter *rctImpl_objcResult = (RCTCoreQueryFilter *)[self.bridge moduleForName:@"CoreQueryFilter"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreQueryFilter", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling QueryFilter::blockHeightGt", nil);
    }

}

RCT_REMAP_METHOD(blockHeightLte,blockHeightLtewithParams:(int64_t)blockHeight withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    QueryFilter * objcResult = [QueryFilter blockHeightLte:blockHeight];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreQueryFilter *rctImpl_objcResult = (RCTCoreQueryFilter *)[self.bridge moduleForName:@"CoreQueryFilter"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreQueryFilter", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling QueryFilter::blockHeightLte", nil);
    }

}

RCT_REMAP_METHOD(blockHeightLt,blockHeightLtwithParams:(int64_t)blockHeight withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    QueryFilter * objcResult = [QueryFilter blockHeightLt:blockHeight];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreQueryFilter *rctImpl_objcResult = (RCTCoreQueryFilter *)[self.bridge moduleForName:@"CoreQueryFilter"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreQueryFilter", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling QueryFilter::blockHeightLt", nil);
    }

}

RCT_REMAP_METHOD(blockHeightIsNull,blockHeightIsNullWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    QueryFilter * objcResult = [QueryFilter blockHeightIsNull];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreQueryFilter *rctImpl_objcResult = (RCTCoreQueryFilter *)[self.bridge moduleForName:@"CoreQueryFilter"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreQueryFilter", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling QueryFilter::blockHeightIsNull", nil);
    }

}

RCT_REMAP_METHOD(operationTypeEq,operationTypeEqwithParams:(OperationType)operationType withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    QueryFilter * objcResult = [QueryFilter operationTypeEq:operationType];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreQueryFilter *rctImpl_objcResult = (RCTCoreQueryFilter *)[self.bridge moduleForName:@"CoreQueryFilter"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreQueryFilter", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling QueryFilter::operationTypeEq", nil);
    }

}

RCT_REMAP_METHOD(operationTypeNeq,operationTypeNeqwithParams:(OperationType)operationType withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    QueryFilter * objcResult = [QueryFilter operationTypeNeq:operationType];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreQueryFilter *rctImpl_objcResult = (RCTCoreQueryFilter *)[self.bridge moduleForName:@"CoreQueryFilter"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreQueryFilter", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling QueryFilter::operationTypeNeq", nil);
    }

}

RCT_REMAP_METHOD(opAnd,opAnd:(NSDictionary *)currentInstance withParams:(NSDictionary *)filter withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreQueryFilter::opAnd, first argument should be an instance of QueryFilter", nil);
    }
    QueryFilter *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling QueryFilter::opAnd, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
    }
    RCTCoreQueryFilter *rctParam_filter = (RCTCoreQueryFilter *)[self.bridge moduleForName:@"CoreQueryFilter"];
    QueryFilter *objcParam_0 = (QueryFilter *)[rctParam_filter.objcImplementations objectForKey:filter[@"uid"]];
    QueryFilter * objcResult = [currentInstanceObj opAnd:objcParam_0];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreQueryFilter *rctImpl_objcResult = (RCTCoreQueryFilter *)[self.bridge moduleForName:@"CoreQueryFilter"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreQueryFilter", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling QueryFilter::opAnd", nil);
    }

}

RCT_REMAP_METHOD(opOr,opOr:(NSDictionary *)currentInstance withParams:(NSDictionary *)filter withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreQueryFilter::opOr, first argument should be an instance of QueryFilter", nil);
    }
    QueryFilter *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling QueryFilter::opOr, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
    }
    RCTCoreQueryFilter *rctParam_filter = (RCTCoreQueryFilter *)[self.bridge moduleForName:@"CoreQueryFilter"];
    QueryFilter *objcParam_0 = (QueryFilter *)[rctParam_filter.objcImplementations objectForKey:filter[@"uid"]];
    QueryFilter * objcResult = [currentInstanceObj opOr:objcParam_0];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreQueryFilter *rctImpl_objcResult = (RCTCoreQueryFilter *)[self.bridge moduleForName:@"CoreQueryFilter"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreQueryFilter", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling QueryFilter::opOr", nil);
    }

}

RCT_REMAP_METHOD(opAndNot,opAndNot:(NSDictionary *)currentInstance withParams:(NSDictionary *)filter withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreQueryFilter::opAndNot, first argument should be an instance of QueryFilter", nil);
    }
    QueryFilter *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling QueryFilter::opAndNot, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
    }
    RCTCoreQueryFilter *rctParam_filter = (RCTCoreQueryFilter *)[self.bridge moduleForName:@"CoreQueryFilter"];
    QueryFilter *objcParam_0 = (QueryFilter *)[rctParam_filter.objcImplementations objectForKey:filter[@"uid"]];
    QueryFilter * objcResult = [currentInstanceObj opAndNot:objcParam_0];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreQueryFilter *rctImpl_objcResult = (RCTCoreQueryFilter *)[self.bridge moduleForName:@"CoreQueryFilter"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreQueryFilter", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling QueryFilter::opAndNot", nil);
    }

}

RCT_REMAP_METHOD(opOrNot,opOrNot:(NSDictionary *)currentInstance withParams:(NSDictionary *)filter withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreQueryFilter::opOrNot, first argument should be an instance of QueryFilter", nil);
    }
    QueryFilter *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling QueryFilter::opOrNot, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
    }
    RCTCoreQueryFilter *rctParam_filter = (RCTCoreQueryFilter *)[self.bridge moduleForName:@"CoreQueryFilter"];
    QueryFilter *objcParam_0 = (QueryFilter *)[rctParam_filter.objcImplementations objectForKey:filter[@"uid"]];
    QueryFilter * objcResult = [currentInstanceObj opOrNot:objcParam_0];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreQueryFilter *rctImpl_objcResult = (RCTCoreQueryFilter *)[self.bridge moduleForName:@"CoreQueryFilter"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreQueryFilter", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling QueryFilter::opOrNot", nil);
    }

}
@end
