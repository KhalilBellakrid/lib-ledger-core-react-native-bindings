// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from thread_dispatcher.djinni

#import "RCTCoreThreadDispatcher.h"


@implementation RCTCoreThreadDispatcher
//Export module
RCT_EXPORT_MODULE(RCTCoreThreadDispatcher)

@synthesize bridge = _bridge;

-(instancetype)init
{
    self = [super init];
    //Init Objc implementation
    if(self)
    {
        self.objcImplementations = [[NSMutableDictionary alloc] init];
    }
    return self;
}

+ (BOOL)requiresMainQueueSetup
{
    return NO;
}

/**
 *Get an execution context where tasks are executed sequentially
 *@param name, string, name of execution context to retrieve
 *@return ExecutionContext object
 */
RCT_REMAP_METHOD(getSerialExecutionContext,getSerialExecutionContext:(NSDictionary *)currentInstance withParams:(nonnull NSString *)name withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreThreadDispatcher::getSerialExecutionContext, first argument should be an instance of ThreadDispatcherImpl", nil);
    }
    ThreadDispatcherImpl *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling ThreadDispatcherImpl::getSerialExecutionContext, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
    }
    id<ExecutionContext> objcResult = [currentInstanceObj getSerialExecutionContext:name];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreExecutionContext *rctImpl_objcResult = (RCTCoreExecutionContext *)[self.bridge moduleForName:@"CoreExecutionContext"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreExecutionContext", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling ThreadDispatcherImpl::getSerialExecutionContext", nil);
    }

}

/**
 *Get an execution context where tasks are executed in parallel thanks to a thread pool
 *where a system of inter-thread communication was designed
 *@param name, string, name of execution context to retrieve
 *@return ExecutionContext object
 */
RCT_REMAP_METHOD(getThreadPoolExecutionContext,getThreadPoolExecutionContext:(NSDictionary *)currentInstance withParams:(nonnull NSString *)name withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreThreadDispatcher::getThreadPoolExecutionContext, first argument should be an instance of ThreadDispatcherImpl", nil);
    }
    ThreadDispatcherImpl *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling ThreadDispatcherImpl::getThreadPoolExecutionContext, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
    }
    id<ExecutionContext> objcResult = [currentInstanceObj getThreadPoolExecutionContext:name];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreExecutionContext *rctImpl_objcResult = (RCTCoreExecutionContext *)[self.bridge moduleForName:@"CoreExecutionContext"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreExecutionContext", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling ThreadDispatcherImpl::getThreadPoolExecutionContext", nil);
    }

}

/**
 *Get main execution context (generally where tasks that should never get blocked are executed)
 *@return ExecutionContext object
 */
RCT_REMAP_METHOD(getMainExecutionContext,getMainExecutionContext:(NSDictionary *)currentInstance WithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreThreadDispatcher::getMainExecutionContext, first argument should be an instance of ThreadDispatcherImpl", nil);
    }
    ThreadDispatcherImpl *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling ThreadDispatcherImpl::getMainExecutionContext, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
    }
    id<ExecutionContext> objcResult = [currentInstanceObj getMainExecutionContext];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreExecutionContext *rctImpl_objcResult = (RCTCoreExecutionContext *)[self.bridge moduleForName:@"CoreExecutionContext"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreExecutionContext", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling ThreadDispatcherImpl::getMainExecutionContext", nil);
    }

}

/**
 *Get lock to handle multithreading
 *@return Lock object
 */
RCT_REMAP_METHOD(newLock,newLock:(NSDictionary *)currentInstance WithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreThreadDispatcher::newLock, first argument should be an instance of ThreadDispatcherImpl", nil);
    }
    ThreadDispatcherImpl *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling ThreadDispatcherImpl::newLock, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
    }
    id<Lock> objcResult = [currentInstanceObj newLock];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreLock *rctImpl_objcResult = (RCTCoreLock *)[self.bridge moduleForName:@"CoreLock"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreLock", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling ThreadDispatcherImpl::newLock", nil);
    }

}
RCT_REMAP_METHOD(new, newWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    ThreadDispatcherImpl *objcResult = [[ThreadDispatcherImpl alloc] init];
    NSString *uuid = [[NSUUID UUID] UUIDString];
    [self.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreThreadDispatcherImpl", @"uid" : uuid };
    if (!objcResult || !result)
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreThreadDispatcherImpl::init", nil);
    }
    resolve(result);
}
@end
