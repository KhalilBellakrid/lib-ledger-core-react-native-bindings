// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from wallet_pool.djinni

#import "RCTCoreWalletPoolBuilder.h"


@implementation RCTCoreWalletPoolBuilder
//Export module
RCT_EXPORT_MODULE(RCTCoreWalletPoolBuilder)

@synthesize bridge = _bridge;

-(instancetype)init
{
    self = [super init];
    //Init Objc implementation
    if(self)
    {
        self.objcImplementations = [[NSMutableDictionary alloc] init];
    }
    return self;
}

+ (BOOL)requiresMainQueueSetup
{
    return NO;
}

/**
 *Set http client to be used for wallet pool build
 *@param client, HttpClient
 *@return WalletPoolBuilder object, instance with wallet pool http client set
 */
RCT_REMAP_METHOD(setHttpClient,setHttpClient:(NSDictionary *)currentInstance withParams:(NSDictionary *)client withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreWalletPoolBuilder::setHttpClient, first argument should be an instance of WalletPoolBuilder", nil);
    }
    WalletPoolBuilder *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling WalletPoolBuilder::setHttpClient, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
    }
    RCTCoreHttpClient *rctParam_client = (RCTCoreHttpClient *)[self.bridge moduleForName:@"CoreHttpClient"];
    id<HttpClient>objcParam_0 = (id<HttpClient>)[rctParam_client.objcImplementations objectForKey:client[@"uid"]];
    WalletPoolBuilder * objcResult = [currentInstanceObj setHttpClient:objcParam_0];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreWalletPoolBuilder *rctImpl_objcResult = (RCTCoreWalletPoolBuilder *)[self.bridge moduleForName:@"CoreWalletPoolBuilder"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreWalletPoolBuilder", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling WalletPoolBuilder::setHttpClient", nil);
    }

}

/**
 *Set web socket client, through which wallet pool will listen and get notified (by explorers, DBs...)
 *@param client, WebSocketClient object
 *@reutnr WalletPoolBuilder object, instance with wallet pool web socket client set
 */
RCT_REMAP_METHOD(setWebsocketClient,setWebsocketClient:(NSDictionary *)currentInstance withParams:(NSDictionary *)client withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreWalletPoolBuilder::setWebsocketClient, first argument should be an instance of WalletPoolBuilder", nil);
    }
    WalletPoolBuilder *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling WalletPoolBuilder::setWebsocketClient, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
    }
    RCTCoreWebSocketClient *rctParam_client = (RCTCoreWebSocketClient *)[self.bridge moduleForName:@"CoreWebSocketClient"];
    id<WebSocketClient>objcParam_0 = (id<WebSocketClient>)[rctParam_client.objcImplementations objectForKey:client[@"uid"]];
    WalletPoolBuilder * objcResult = [currentInstanceObj setWebsocketClient:objcParam_0];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreWalletPoolBuilder *rctImpl_objcResult = (RCTCoreWalletPoolBuilder *)[self.bridge moduleForName:@"CoreWalletPoolBuilder"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreWalletPoolBuilder", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling WalletPoolBuilder::setWebsocketClient", nil);
    }

}

/**
 *Set path resolver that will be used for wallet pool creation to resolve wallet pool's (DB's, logs, preferences ...) paths
 *@param pathResolver, Pathresolver object
 *@param WalletPoolBuilder object, instance with wallet pool path resolver set
 */
RCT_REMAP_METHOD(setPathResolver,setPathResolver:(NSDictionary *)currentInstance withParams:(NSDictionary *)pathResolver withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreWalletPoolBuilder::setPathResolver, first argument should be an instance of WalletPoolBuilder", nil);
    }
    WalletPoolBuilder *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling WalletPoolBuilder::setPathResolver, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
    }
    RCTCorePathResolver *rctParam_pathResolver = (RCTCorePathResolver *)[self.bridge moduleForName:@"CorePathResolver"];
    id<PathResolver>objcParam_0 = (id<PathResolver>)[rctParam_pathResolver.objcImplementations objectForKey:pathResolver[@"uid"]];
    WalletPoolBuilder * objcResult = [currentInstanceObj setPathResolver:objcParam_0];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreWalletPoolBuilder *rctImpl_objcResult = (RCTCoreWalletPoolBuilder *)[self.bridge moduleForName:@"CoreWalletPoolBuilder"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreWalletPoolBuilder", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling WalletPoolBuilder::setPathResolver", nil);
    }

}

/**
 *Set log printer that will be used for wallet pool creation to dump wallet pool's logs (for debug purposes)
 *@param printer, LogPrinter object
 *@param WalletPoolBuilder object, instance with wallet pool logger set
 */
RCT_REMAP_METHOD(setLogPrinter,setLogPrinter:(NSDictionary *)currentInstance withParams:(NSDictionary *)printer withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreWalletPoolBuilder::setLogPrinter, first argument should be an instance of WalletPoolBuilder", nil);
    }
    WalletPoolBuilder *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling WalletPoolBuilder::setLogPrinter, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
    }
    RCTCoreLogPrinter *rctParam_printer = (RCTCoreLogPrinter *)[self.bridge moduleForName:@"CoreLogPrinter"];
    id<LogPrinter>objcParam_0 = (id<LogPrinter>)[rctParam_printer.objcImplementations objectForKey:printer[@"uid"]];
    WalletPoolBuilder * objcResult = [currentInstanceObj setLogPrinter:objcParam_0];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreWalletPoolBuilder *rctImpl_objcResult = (RCTCoreWalletPoolBuilder *)[self.bridge moduleForName:@"CoreWalletPoolBuilder"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreWalletPoolBuilder", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling WalletPoolBuilder::setLogPrinter", nil);
    }

}

/**
 *Set thread dispatcher that will be used for wallet pool creation to dispatch wallet pool's tasks through different threads
 *@param dispatcher, ThreadDispatcher object
 *@param WalletPoolBuilder object, instance with wallet pool thread dispatcher set
 */
RCT_REMAP_METHOD(setThreadDispatcher,setThreadDispatcher:(NSDictionary *)currentInstance withParams:(NSDictionary *)dispatcher withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreWalletPoolBuilder::setThreadDispatcher, first argument should be an instance of WalletPoolBuilder", nil);
    }
    WalletPoolBuilder *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling WalletPoolBuilder::setThreadDispatcher, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
    }
    RCTCoreThreadDispatcher *rctParam_dispatcher = (RCTCoreThreadDispatcher *)[self.bridge moduleForName:@"CoreThreadDispatcher"];
    id<ThreadDispatcher>objcParam_0 = (id<ThreadDispatcher>)[rctParam_dispatcher.objcImplementations objectForKey:dispatcher[@"uid"]];
    WalletPoolBuilder * objcResult = [currentInstanceObj setThreadDispatcher:objcParam_0];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreWalletPoolBuilder *rctImpl_objcResult = (RCTCoreWalletPoolBuilder *)[self.bridge moduleForName:@"CoreWalletPoolBuilder"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreWalletPoolBuilder", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling WalletPoolBuilder::setThreadDispatcher", nil);
    }

}

/**
 *Set name that will be used for wallet pool creation
 *@param name, string
 *@return WalletPoolBuilder object, instance with wallet pool name set
 */
RCT_REMAP_METHOD(setName,setName:(NSDictionary *)currentInstance withParams:(nonnull NSString *)name withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreWalletPoolBuilder::setName, first argument should be an instance of WalletPoolBuilder", nil);
    }
    WalletPoolBuilder *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling WalletPoolBuilder::setName, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
    }
    WalletPoolBuilder * objcResult = [currentInstanceObj setName:name];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreWalletPoolBuilder *rctImpl_objcResult = (RCTCoreWalletPoolBuilder *)[self.bridge moduleForName:@"CoreWalletPoolBuilder"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreWalletPoolBuilder", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling WalletPoolBuilder::setName", nil);
    }

}

/**
 *Set password that will be used for wallet pool creation
 *@param password, string
 *@return WalletPoolBuilder object, with wallet pool password set
 */
RCT_REMAP_METHOD(setPassword,setPassword:(NSDictionary *)currentInstance withParams:(nonnull NSString *)password withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreWalletPoolBuilder::setPassword, first argument should be an instance of WalletPoolBuilder", nil);
    }
    WalletPoolBuilder *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling WalletPoolBuilder::setPassword, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
    }
    WalletPoolBuilder * objcResult = [currentInstanceObj setPassword:password];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreWalletPoolBuilder *rctImpl_objcResult = (RCTCoreWalletPoolBuilder *)[self.bridge moduleForName:@"CoreWalletPoolBuilder"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreWalletPoolBuilder", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling WalletPoolBuilder::setPassword", nil);
    }

}

/**
 *Set random number generator that will be used for wallet pool creation
 *@param rng, RandomNumberGenerator object
 *@return WalletPoolBuilder object, with wallet pool random number generator set
 */
RCT_REMAP_METHOD(setRandomNumberGenerator,setRandomNumberGenerator:(NSDictionary *)currentInstance withParams:(NSDictionary *)rng withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreWalletPoolBuilder::setRandomNumberGenerator, first argument should be an instance of WalletPoolBuilder", nil);
    }
    WalletPoolBuilder *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling WalletPoolBuilder::setRandomNumberGenerator, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
    }
    RCTCoreRandomNumberGenerator *rctParam_rng = (RCTCoreRandomNumberGenerator *)[self.bridge moduleForName:@"CoreRandomNumberGenerator"];
    id<RandomNumberGenerator>objcParam_0 = (id<RandomNumberGenerator>)[rctParam_rng.objcImplementations objectForKey:rng[@"uid"]];
    WalletPoolBuilder * objcResult = [currentInstanceObj setRandomNumberGenerator:objcParam_0];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreWalletPoolBuilder *rctImpl_objcResult = (RCTCoreWalletPoolBuilder *)[self.bridge moduleForName:@"CoreWalletPoolBuilder"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreWalletPoolBuilder", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling WalletPoolBuilder::setRandomNumberGenerator", nil);
    }

}

/**
 *Set database that will be used for wallet pool creation, it will store all wallet pool's data (created wallets, accounts, preferences ...)
 *@param backend, DatabaseBackend object
 *@return WalletPoolBuilder object, with wallet pool database set
 */
RCT_REMAP_METHOD(setDatabaseBackend,setDatabaseBackend:(NSDictionary *)currentInstance withParams:(NSDictionary *)backend withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreWalletPoolBuilder::setDatabaseBackend, first argument should be an instance of WalletPoolBuilder", nil);
    }
    WalletPoolBuilder *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling WalletPoolBuilder::setDatabaseBackend, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
    }
    RCTCoreDatabaseBackend *rctParam_backend = (RCTCoreDatabaseBackend *)[self.bridge moduleForName:@"CoreDatabaseBackend"];
    DatabaseBackend *objcParam_0 = (DatabaseBackend *)[rctParam_backend.objcImplementations objectForKey:backend[@"uid"]];
    WalletPoolBuilder * objcResult = [currentInstanceObj setDatabaseBackend:objcParam_0];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreWalletPoolBuilder *rctImpl_objcResult = (RCTCoreWalletPoolBuilder *)[self.bridge moduleForName:@"CoreWalletPoolBuilder"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreWalletPoolBuilder", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling WalletPoolBuilder::setDatabaseBackend", nil);
    }

}

/**
 *Set configuration that will be used for wallet pool creation
 *@param configuration, DynamicObject object
 *@return WalletPoolBuilder object, with wallet pool configuration set
 */
RCT_REMAP_METHOD(setConfiguration,setConfiguration:(NSDictionary *)currentInstance withParams:(NSDictionary *)configuration withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreWalletPoolBuilder::setConfiguration, first argument should be an instance of WalletPoolBuilder", nil);
    }
    WalletPoolBuilder *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling WalletPoolBuilder::setConfiguration, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
    }
    RCTCoreDynamicObject *rctParam_configuration = (RCTCoreDynamicObject *)[self.bridge moduleForName:@"CoreDynamicObject"];
    DynamicObject *objcParam_0 = (DynamicObject *)[rctParam_configuration.objcImplementations objectForKey:configuration[@"uid"]];
    WalletPoolBuilder * objcResult = [currentInstanceObj setConfiguration:objcParam_0];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreWalletPoolBuilder *rctImpl_objcResult = (RCTCoreWalletPoolBuilder *)[self.bridge moduleForName:@"CoreWalletPoolBuilder"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreWalletPoolBuilder", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling WalletPoolBuilder::setConfiguration", nil);
    }

}

/**
 *Create wallet pool
 *@param callback, Callback object returning a WalletPool instance
 */
RCT_REMAP_METHOD(build,build:(NSDictionary *)currentInstance WithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreWalletPoolBuilder::build, first argument should be an instance of WalletPoolBuilder", nil);
    }
    WalletPoolBuilder *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling WalletPoolBuilder::build, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
    }
    RCTCoreWalletPoolCallback *objcParam_0 = [[RCTCoreWalletPoolCallback alloc] initWithResolver:resolve rejecter:reject andBridge:self.bridge];
    [currentInstanceObj build:objcParam_0];

}

/**
 *Create an instance of the wallet pool builder
 *@return WalletPoolBuilder object
 */
RCT_REMAP_METHOD(createInstance,createInstanceWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    WalletPoolBuilder * objcResult = [WalletPoolBuilder createInstance];

    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreWalletPoolBuilder *rctImpl_objcResult = (RCTCoreWalletPoolBuilder *)[self.bridge moduleForName:@"CoreWalletPoolBuilder"];
    [rctImpl_objcResult.objcImplementations setObject:objcResult forKey:uuid];
    NSDictionary *result = @{@"type" : @"CoreWalletPoolBuilder", @"uid" : uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling WalletPoolBuilder::createInstance", nil);
    }

}
@end
